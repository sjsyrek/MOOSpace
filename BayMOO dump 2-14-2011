@auditObjects owned by Avangion (from #0 to #23545):  9K #23230 Avangion                   [Nostromo]  1K #18957 Astral Space              589B  #6492 Color Pool                 *Mystical Crossroad->Astral Space629B #17896 Color Pool                 Astral Space->*Mystical Crossroad  1K #10566 a scroll                   [Astral Space]  1K #19244 Starfleet Headquarters      1K #21325 Starfleet Command         422B #21326 n                          Starfleet Headquart->Starfleet Command  1K #12388 UFP Council Chambers      412B  #9978 ne                         Starfleet Headquart->UFP Council Chamber  2K  #2459 Starfleet Academy         380B #13520 s                          Starfleet Command->Starfleet Headquart400B #16882 sw                         UFP Council Chamber->Starfleet Headquart  3K  #2523 Avangion's Office         390B #17947 office                     Starfleet Command->Avangion's Office384B #15609 out                        Avangion's Office->Starfleet Command  2K #14113 Transporter Room          380B #14330 w                          Starfleet Command->Transporter Room380B #18688 e                          Transporter Room->Starfleet Command  4K #19782 DeForest Kelley Memorial   [BaySpace]380B #20088 n                          Starfleet Command->DeForest Kelley Mem380B #20499 s                          DeForest Kelley Mem->Starfleet Command  1K #13455 Bankside, San Francisco B  50K #19950 [MOOSpace] Generic Inters  [San Francisco Shipyards]  9K  #7771 [MOOSpace] Generic Heaven  [Hyperspace Planet Factory]  3K  #9602 [MOOSpace] Generic Astrop  [Avangion] 38K #16043 [MOOSpace] Generic Univer  [Avangion]  3K #13676 Desk Ornament              [Avangion's Office]  1K #22140 Tricorder                  [Avangion]  3K #18408 BaySpace                   [Desk Ornament]  4K  #8510 Nostromo                   [BaySpace]  5K  #8391 Docking Bay                [BaySpace]  5K #21738 Shuttlepod Alpha           [DeForest Kelley Memorial Spaceport]  6K #21733 [MOOSpace] Generic Wormho  [Avangion]966B #19256 STARFLEET                  *Other Worlds->Starfleet Headquart864B #19275 OTHER                      Starfleet Headquart->*Other Worlds 15K  #7466 [MOOSpace] Generic Space   [Avangion's Office]465B #18933                             1K #21505 Information Board          [DeForest Kelley Memorial Spaceport]393B  #5338 e                          Starfleet Headquart->Bankside, San Franc380B #18991 w                          Bankside, San Franc->Starfleet Headquart422B #10970 w                          Starfleet Headquart->Starfleet Academy380B #18754 e                          Starfleet Academy->Starfleet Headquart380B  #7367 w                          UFP Council Chamber->Starfleet Command380B  #7438 e                          Starfleet Command->UFP Council Chamber380B #19003 n                          Starfleet Academy->Transporter Room380B #19004 s                          Transporter Room->Starfleet Academy380B #20769 n                          Transporter Room->DeForest Kelley Mem382B #20770 sw                         DeForest Kelley Mem->Transporter Room380B #12819 n                          UFP Council Chamber->DeForest Kelley Mem382B  #5832 se                         DeForest Kelley Mem->UFP Council Chamber  1K  #9308 Promenade                 596B #12836 up                         Docking Bay->Promenade610B  #5191 down                       Promenade->Docking Bay  1K  #8658 Drydock                   583B  #4569 down                       Docking Bay->Drydock594B #15072 up                         Drydock->Docking Bay  3K #15218 San Francisco Shipyards   380B #20358 n                          DeForest Kelley Mem->San Francisco Shipy380B #21807 s                          San Francisco Shipy->DeForest Kelley Mem  2K #19992 Supermassive Black Hole    [BaySpace]  2K #20386 Shuttlepod Beta            [Docking Bay]  2K #21156 MOOSpace Exploration Lead  [Zefram's Cantina]976B #14593 Transporter Bay           607B #14874 bay                        Promenade->Transporter Bay588B #20929 out                        Transporter Bay->Promenade  2K  #3558 Magrathea                  [BaySpace]  1K #16668 Spacedock Bulletin Displa  [Promenade]  1K  #7243 Stellar Cartography       595B #21682 up                         Promenade->Stellar Cartography610B  #8129 down                       Stellar Cartography->Promenade  2K #21816 Discovery One              [DeForest Kelley Memorial Spaceport]  7K #20383 Instructional Display      [Starfleet Academy]  4K #14212 Far Odyssey                [BaySpace]  5K #17102 USS Enterprise             [Docking Bay]  3K #17626 Dex                        [Zefram's Cantina]  1K  #4726 Zefram's Cantina          563B #19497 cantina                    Promenade->Zefram's Cantina480B #11314 out                        Zefram's Cantina->Promenade620B #19536 ale                        [Dex]694B  #6286 glass of Romulan ale       [Dex]553B  #8694                            [Dex]662B  #1744 Elemental Plane of Water   [Avangion]  5K #16345 Hyperspace Planet Factory 621B  #1613 aircar                     Magrathea->Hyperspace Planet F598B #12945 aircar                     Hyperspace Planet F->Magrathea  1K #21840 Admiral Korin              [Far Odyssey]  1K #18522 *SUPER IMPORTANT-LOOKING   [Starfleet Headquarters]  4K #12611 Alpha Centauri             [BaySpace] ??? #17033 Statue                     [Bankside, San Francisco Bay]-- 90 objects.  Total bytes: 258,526.----------------------------------------------------------------------------------------------------------------@dump #19782;#19782.("dock") = #19782;#19782.("oname") = "Earth";#19782.("odescription") = {"Mostly harmless? A tiny, blue-green oasis and the home planet of the human civilization. You can't help but feel nostalgic whenever you look on it again. It is the seat of all of mankind's dreams and nightmares, its hopes and its memories. There is nothing in all of creation so beautiful and, against the inky void, seemingly so delicate."};#19782.("valid_space_object") = 1;#19782.("universe") = #18408;#19782.("help_msg") = "A heavenly body can be a planet, space station, asteroid, or anything else that might be found floating in the cosmic void. Ships can land on it. Exploring the heavenly bodies of the universe is one of the primary raisons d'etre of MOOSpace. If you'd like to build your own planet, you must first visit Magrathea.";#19782.("phenomenon") = {"The Milky Way", {"The Milky Way is a barred, spiral galaxy that radiates out from a dense, brilliant core. Thick tendrils of stellar mass and roiling plumes of primordial gases slice across the visible cosmos in every direction. But space, even here, is still a cold, empty vacuum--the very essence of being between the past of your origin and the future of your desires."}};#19782.("user_verbs") = {"@permit", "@oname", "@odescription", "@cloak", "@add-ship", "@remove-ship", "@ships", "@dock"};#19782.("tell_exits") = 1;#19782.("w_time") = 1019289600;#19782.("w_prog") = 5;#19782.("entrances") = {#20088, #20769, #12819, #21807};#19782.("blessed_task") = 1421917828;#19782.("exits") = {#20499, #20770, #5832, #20358};#19782.("blessed_object") = #-1;#19782.("key") = 0;#19782.("aliases") = {"DeForest Kelley Memorial Spaceport", "Earth"};#19782.("description") = "Clean and efficient are the best words to describe Starfleet's San Francisco Spaceport. Although not especially large by past standards, it has been designed to most effectively handle extraterrestrial traffic in as little space as possible. A number of landing pads surround a central unloading area where flight attendants usher passengers to and from the terminal building and spaceport personnel handle cargo from all over the galaxy. Security is tight here, as well. Armed guards watch over the perimeter of the spaceport, occasionally glaring in your direction. The gorse-crowned hills of Marin County rise dramatically all around you, and you wonder if it might not be more pleasant to travel the stars by bicycle.";#19782.("object_size") = {4405, 1297703991}"#19782.("original_owner") => E_PERM (Permission denied)"#19782.("days_left") => E_PERM (Permission denied);#19782.("creation_date") = 969261418"#19782.("queued_task_limit") => E_PERM (Permission denied)@args #19782:"shuttle" none none none@program #19782:shuttle"Usage:  shuttle";"  Resets the shuttlepods in case something went wrong with them. No effect otherwise.";if ((#21738.location != this) && (#20386.location != this))  player:tell("Checking shuttlepod status...");  $command_utils:suspend(5);  if ((#21738.location != this) && (#20386.location != this))    #21738:moveto(this);    #20386:moveto(#8391);    #21738.in_range = this;    #20386.in_range = #8391;    #21738.launched = 0;    #20386.launched = 0;    this:announce_all(#21738:land_end_outside_msg());    #8391:announce_all(#20386:land_end_outside_msg());    return player:tell("Shuttlepods reset.");  endifendifplayer:tell("Shuttlepods are operating normally.");"LMB #23230 02/11/2011";."***finished***@dump #15218;#15218.("entrances") = {#20358};#15218.("blessed_task") = 2085731316;#15218.("exits") = {#21807};#15218.("blessed_object") = #-1;#15218.("key") = 0;#15218.("aliases") = {"San Francisco Shipyards"};#15218.("description") = {"This is the terrestrial construction yard for all varieties of new interstellar craft. After their hulls are built and main fittings installed here on Earth, new ships are transferred to the orbital drydocks for initialization and commissioning.", "If you have a ship here awaiting initialization, type 'build <ship name>' to complete construction and transfer it to the orbiting drydock."};#15218.("object_size") = {3203, 1297703991}"#15218.("original_owner") => E_PERM (Permission denied)"#15218.("days_left") => E_PERM (Permission denied);#15218.("creation_date") = 1296767163"#15218.("queued_task_limit") => E_PERM (Permission denied)@args #15218:"build" any none none@program #15218:build"Usage:  build <ship name>";"  Completes the initialization procedure for a newly created ship object and transfers it to the orbiting drydock. This process is necessary to ensure that new ships function correctly within the MOOSpace environment.";if (!args)  return player:tell("Usage:  build <ship name>");endifship = $string_utils:match_object(argstr, this);if (ship == $ambiguous_match)  player:tell("'", argstr, "' can refer to more than one ship awaiting initialization. Please be more specific.");elseif (ship == $failed_match)  player:tell("There is no ship called '", argstr, "' awaiting initializaton.");elseif (ship:valid_space_object())  player:tell(ship:title(), " has already been initialized.");elseif (!$perm_utils:controls(caller, ship))  player:tell("Only the owner of ", ship:title(), " is permitted to initialize it.");else  ship.universe = #18408;  ship.dock = ship;  ship.speed = 10;  ship.valid_space_object = 1;  this:announce_all("A swarm of highly-efficient engineers rapidly completes the construction of ", ship:title(), ".");  origin = this.location;  ship:moveto(#8658);  ship.phenomenon = #8391.phenomenon;  if (ship.location == origin)    return player:tell("Transfer to drydock failed. ", ship:title(), " has been successfully initialized, but it will not function correctly if it has moveto protection.");  endif  this:announce_all("A transorbital tug arrives, locks a tractor beam onto ", ship:title(), " and tows it to the orbiting drydock.");  ship.location:announce_all("A transorbital tug towing the newly christened ship \"", ship:title(), "\" arrives, disengages its tractor beam, and returns to Earth.");  player:tell("Ship initialization complete. You should probably give it more interesting interior and exterior descriptions using the @oname, @odescription, and regular description commands and, if you want, unique messages. Please transport or take a shuttlepod up to Spacedock (#8391) and proceed to Drydock to take command of ", ship:title(), ".");endif"LMB #23230 02/14/2011";."***finished***@dump #16345;#16345.("entrances") = {#1613};#16345.("blessed_task") = 1203218915;#16345.("exits") = {#12945};#16345.("blessed_object") = #-1;#16345.("key") = 0;#16345.("aliases") = {"Hyperspace Planet Factory"};#16345.("description") = {"The wall of this hyperspace chamber, which does not literally exist within Magrathea, defies the imagination--seduces it and defeats it. The wall is so paralyzingly vast and sheer that its top, bottom and sides pass away beyond the reach of sight. The mere shock of vertigo could kill a man. The wall appears perfectly flat. It would take the finest laser-measuring equipment to detect that as it climbs, apparently to infinity, as it drops dizzily away, as it planes out to either side, it also curves. It meets itself again thirteen light seconds away. In other words the wall forms the inside of a hollow sphere, a sphere over three million miles across and flooded with unimaginable light. Ranged away before you, at distances you can neither judge nor even guess at, are a series of curious suspensions, delicate traceries of metal and light hung about shadowy spherical shapes that hang in the space."};#16345.("object_size") = {5324, 1297703991}"#16345.("original_owner") => E_PERM (Permission denied)"#16345.("days_left") => E_PERM (Permission denied);#16345.("creation_date") = 1297660427"#16345.("queued_task_limit") => E_PERM (Permission denied)@args #16345:"build" any in any@program #16345:build"Usage:  build <heavenly body> in <universe>";"  Completes the initialization procedure for a newly created heavenly body and transfers it into the indicated universe. This process is necessary to ensure that new heavenly bodies function correctly within the MOOSpace environment.";if (!args)  return player:tell("Usage:  build <heavenly body> in <universe>");endifplanet = dobjstr;universe = iobjstr ? ($code_utils:toobj(iobjstr) != E_TYPE) ? $code_utils:toobj(iobjstr).name | iobjstr | #18408.name;planet = $string_utils:match_object(planet, this);if (planet == $ambiguous_match)  player:tell("'", args[1], "' can refer to more than one heavenly body awaiting initialization. Fantastically improbable, but true. Please be more specific.");elseif (planet == $failed_match)  player:tell("There is no heavenly body called '", args[1], "' awaiting initialization.");elseif (planet:valid_space_object())  player:tell(planet:title(), " has already been initialized.");elseif (!$perm_utils:controls(caller, planet))  player:tell("Only the owner of ", planet:title(), " is permitted to initialize it.");else  universe = $string_utils:match(universe, $object_utils:descendents(#16043), "aliases");  if ((universe != $failed_match) && (universe != $ambiguous_match))    "This section actually does something.";    player:tell("You must enter coordinates for the location of ", planet:title(), " in ", universe:title(), ".");    r = $command_utils:read(player:tell("Enter a radius for ", planet:title(), ":"));    if ((!(r = `tofloat(r) ! E_INVARG => 0')) || (r < 0.0))      return player:tell("That is not a valid radius. A radius must be greater than or equal to 0. Command aborted.");    endif    theta = $command_utils:read(player:tell("Enter an azimuth for ", planet:title(), ":"));    if (((!(theta = `tofloat(theta) ! E_INVARG => 0')) || (theta < 0.0)) || (theta >= 360.0))      return player:tell("That is not a valid azimuth. An azimuth must be greater than or equal to 0 and less than 360. Command aborted.");    endif    phi = $command_utils:read(player:tell("Enter an inclination for ", planet:title(), ":"));    if (((!(phi = `tofloat(phi) ! E_INVARG => 0')) || (phi < 0.0)) || (phi > 180.0))      return player:tell("That is not a valid inclination. An inclination must be greater than or equal to 0 and less than or equal to 180. Command aborted.");    endif    if (!$string_utils:find_prefix($command_utils:read(player:tell(planet:title(), " will be created in ", universe:title(), " at coordinates (", tostr(r), ", ", tostr(theta), ", ", tostr(phi), "). Do you wish to continue? Yes/No")), {"yes", "1"}))      return player:tell("Command aborted.");    endif    planet.coordinates = {r, theta, phi};    planet.universe = universe;    planet.dock = planet;    planet.valid_space_object = 1;    this:announce_all("Several hundred million construction robots enter the hyperspace planet factory and instantaneously complete the construction of ", planet:title(), " paying particular attention to the fjords.");    origin = this.location;    planet:moveto(universe);    if (planet.location == origin)      return player:tell("Transfer to ", universe:title(), " failed. ", planet:title(), " has been successfully initialized, but it may not function correctly if it has moveto protection.");    endif    planet:universe(1);    this:announce_all("There is a blinding flash of light and ", planet:title(), " vanishes, transiting out of the space-time continuum.");    player:tell("Your heavenly body has been successfully initialized and moved to ", universe:title(), ". You should probably give it more interesting interior and exterior descriptions using the @oname, @odescription, and regular description commands. You and others may now travel to and land on your new heavenly body.");  elseif ((universe == $ambiguous_match) || (universe == $failed_match))    player:tell("'", iobjstr, "' is not the name of a known universe or can refer to more than one universe, as unlikely as that sounds.");  endifendif"LMB #23230 02/14/2011";."***finished***@dump #7466@chmod #7466."permitted" ;#7466.("permitted") = {}@chmod #7466."oname" r;#7466.("oname") = "[MOOSpace] Generic Space Object (outside)"@chmod #7466."odescription" r;#7466.("odescription") = {"This is the parent object for the MOOSpace system. Verbs and properties common to all space objects--such as spaceships, planets, and strange phenomena--reside here. You should not normally create children of this object, because they will not have any functionality, but you can create new classes of space objects from it if you desire. See the appropriate help for descendents of this object for more information:", "", "Generic Interstellar Craft: help #19950", "Generic Heavenly Body: help #7771", "Generic Cosmic Phenomenon: help #9602", "Generic Universe: help #16043", "", "MOOSpace Basic Information: help #13676", "Generic Space Object is a child of the Improved Generic-All-In-One Room: help #7424"}@chmod #7466."valid_space_object" r;#7466.("valid_space_object") = 0@chmod #7466."coordinates" ;#7466.("coordinates") = {0.0, 0.0, 0.0}@chmod #7466."universe" ;#7466.("universe") = 0@chmod #7466."cloaked" ;#7466.("cloaked") = 0;#7466.("help_msg") = "The Generic Space Object is the parent object for all objects in the MOOSpace system except the Generic Universe. For more specific help, see the documentation for the more specialized children of this object."@chmod #7466."phenomenon" ;#7466.("phenomenon") = {"", {""}};#7466.("user_verbs") = {"@permit", "@oname", "@odescription", "@cloak"};#7466.("tell_exits") = 1;#7466.("w_time") = 977040000;#7466.("w_prog") = 2;#7466.("entrances") = {};#7466.("blessed_task") = 1815215361;#7466.("exits") = {};#7466.("blessed_object") = #119;#7466.("key") = 0;#7466.("aliases") = {"[MOOSpace] Generic Space Object", "gso"};#7466.("description") = {"This is the parent object for the MOOSpace system. Verbs and properties common to all space objects--such as spaceships, planets, and strange phenomena--reside here. You should not normally create children of this object, because they will not have any functionality, but you can create new classes of space objects from it if you desire. See the appropriate help for descendents of this object for more information:", "", "Generic Interstellar Craft: help #19950", "Generic Heavenly Body: help #7771", "Generic Cosmic Phenomenon: help #9602", "Generic Universe: help #16043", "", "MOOSpace Basic Information: help #13676", "Generic Space Object is a child of the Improved Generic-All-In-One Room: help #7424"};#7466.("object_size") = {15610, 1297703991}"#7466.("original_owner") => E_PERM (Permission denied)"#7466.("days_left") => E_PERM (Permission denied);#7466.("creation_date") = 1290635626"#7466.("queued_task_limit") => E_PERM (Permission denied)@args #7466:"perm_check" this none this@program #7466:perm_check"Takes a single object as an argument, usually the value of caller if passed from the command line and caller_perms() otherwise. Returns true if the object (typically a player) is this, this.owner, listed in this.permitted, or a wizard. Returns false otherwise or if the argument list is the wrong length. This is a permissions check meant to prevent verb spoofing. Every command verb defined on MOOSpace objects should use it. Since it's so important, perm_check() does considerable maintenance on this.permitted whenever it's called.";{?TestCase = 0, @rest} = args;if (!$perm_utils:controls(caller_perms(), this))  return E_PERM;elseif ((typeof(TestCase) != OBJ) || rest)  return E_ARGS;elseif (!$object_utils:has_property(this, "permitted"))  player:tell("** ERROR: The .permitted property on ", this.name, " is either missing or broken.");  return $perm_utils:controls(caller_perms(), this);elseif (typeof(this.permitted) != LIST)  this.permitted = {};endiftrusted_list = {#23230, this};permitted_list = this.permitted;"The for loop below makes sure the objects in this.permitted are valid (i.e. they exist and haven't been recycled) and cleans it up if necessary.";for trusted_object in (permitted_list = $list_utils:remove_duplicates($list_utils:flatten(permitted_list)))  $command_utils:suspend_if_needed(0);  if ((typeof(trusted_object) == OBJ) && $recycler:valid(trusted_object))    trusted_list = {@trusted_list, trusted_object};  else    permitted_list = setremove(permitted_list, trusted_object);  endifendforthis.permitted = permitted_list;return (TestCase in trusted_list) || $perm_utils:controls(TestCase, this);"LMB #23230 02/10/2011";.@args #7466:"look_self" this none this@program #7466:look_self"Displays different names and descriptions depending on the location of the calling player--the 'o' name and description if the player is outside of the object, and the regular ones otherwise.";if ($object_utils:contains(this, player))  pass(@args);else  player:tell(this:oname());  player:tell_lines(this:odescription());endif"LMB #23230 12/08/2010";.@args #7466:"oname odescription noperms_msg" this none this@program #7466:oname"Verb -> property matching for messages defined on this object. You can make your own versions of these verbs if you want to implement fancy formatting.";return $object_utils:has_property(this, verb) ? (msg = this.(verb)) ? $string_utils:pronoun_sub(msg) | "" | "";"LMB #23230 12/08/2010";.@args #7466:"@permit @trust" any any any@program #7466:@permit"Usage:  @permit <any player> | @permit -<any player>";"  Commissions a player other than the owner to operate or modify this space object. Only the owner, however, can use this command. Use a minus sign '-' in front of the player's name to decommission that player";if (!$perm_utils:controls(caller, this))  player:tell(this:noperms_msg());  return E_PERM;elseif (!args)  permitted_list = $list_utils:remove_duplicates({this.owner, @this.permitted});  player:tell($string_utils:title_list(permitted_list), (permitted_list == {this.owner}) ? " is " | " are ", $string_utils:pronoun_sub("permitted to operate and modify %t."));elseif (dobjstr[1] == "-")  match = $string_utils:match(dobjstr[2..$], {this.owner, @this.permitted}, "aliases");  if ((match == this.owner) && (this.permitted == {}))    player:tell("You cannot decommission yourself!");  elseif (match in this.permitted)    this.permitted = setremove(this.permitted, match);    player:tell(match:title(), $string_utils:pronoun_sub(" is no longer commissioned to operate or modify %t."));  elseif (match == $ambiguous_match)    player:tell(dobjstr, " can refer to more than one player. Please be more specific.");  else    player:tell(dobjstr, $string_utils:pronoun_sub(" is not the name of any player currently commissioned to operate and modify %t."));  endifelse  match = $string_utils:match_player(tostr(dobjstr));  if (match == $failed_match)    player:tell("No player called ", dobjstr, " can be found. Try using the player's object number instead.");  elseif (match == $ambiguous_match)    player:tell(dobjstr, " can refer to more than one player. Please be more specific.");  elseif (match in this.permitted)    player:tell(match:title(), $string_utils:pronoun_sub(" is already permitted to operate and modify %t."));  else    this.permitted = {@this.permitted, match};    player:tell(match:title(), $string_utils:pronoun_sub(" is now commissioned to operate and modify %t."));  endifendif"LMB #23230 01/23/2011";.@args #7466:"moveto" this none this@program #7466:movetoif ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell("Gravity discourages you from even attempting that.");  return;endifreturn pass(@args);"LMB #23230 02/10/2011";.@args #7466:"valid_space_object" this none this@program #7466:valid_space_object"Returns 1 if this object, or the dobj if provided, has been properly initialized to work with MOOSpace and 0 otherwise. You can create your own version of this verb if you want more specialized space objects to satisfy additional conditions.";if (!this:perm_check(caller_perms()))  return E_PERM;endifif (args)  dobj = args[1];  return ($object_utils:isa(dobj, #7466) && dobj.valid_space_object) ? 1 | 0;endifreturn ($object_utils:isa(this, #7466) && this.valid_space_object) ? 1 | 0;"LMB #23230 02/12/2011";.@args #7466:"universe universe_desc" this none this@program #7466:universe"Returns either the name of this universe or the name of the phenomenon in which the caller is located.";if ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endif{?recalc = 0} = args;if (!recalc)  return (verb == "universe") ? this.phenomenon[1] | this.phenomenon[2];endifcoordinates = this.coordinates;pinfo = (verb == "universe") ? this.universe:title() | {this.universe:description()};called_verb = verb;for p in (this.universe.pvalues)  shape = p[3];  verb_name = this.universe.p_shapes[shape] + "_contains";  verb = $object_utils:has_callable_verb(this.universe, verb_name) ? verb_name | "sphere_contains";  center = p[1];  data = p[2];  if (this.universe:(verb)(center, data, coordinates))    index = p in this.universe.pvalues;    pinfo = (called_verb == "universe") ? this.universe.pnames[index] | this.universe.pdescs[index];    this.phenomenon[1] = this.universe.pnames[index];    this.phenomenon[2] = this.universe.pdescs[index];  endif  $command_utils:suspend_if_needed(0);endforreturn pinfo;"LMB #23230 02/13/2011";.@args #7466:"@cloak" any any any@program #7466:@cloak"Usage:  @cloak <on> or <off> | @cloak";"  Cloaks or uncloaks this space object. A cloaked object will be invisible to other ships when they scan. Without 'on' or 'off' as an argument, reports the current cloak status.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be cloaked. Type 'help #13676' for details.");endifif (!args)  status = (this.cloaked == 1) ? " is currently " | " is not currently ";  player:tell(this:title(), status, "cloaked.");elseif (argstr == "on")  if (this.cloaked == 1)    player:tell(this:title(), " is already cloaked.");  else    this.cloaked = 1;    player:tell(this:title(), " is now cloaked.");    this:announce(player:title(), " has activated the cloaking device!");    this:range_update(this.in_range);  endifelseif (argstr == "off")  if (this.cloaked == 0)    player:tell(this:title(), " is not currently cloaked.");  else    this.cloaked = 0;    player:tell(this:title(), " is no longer cloaked.");    this:range_update(this.in_range);    this:announce(player:title(), " has deactivated the cloaking device.");  endifelse  player:tell("Usage:  @cloak <on> or <off> | @cloak");endif"LMB #23230 02/12/2011";.@args #7466:"location_report" this none this@program #7466:location_reportif ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endif{r, theta, phi} = this.coordinates;r = tostr(r);theta = tostr(theta);phi = tostr(phi);return ((((("(" + theta) + " mark ") + phi) + " at ") + r) + " light years)";"LMB #23230 02/10/2011";.@args #7466:"@oname" any none none@program #7466:@oname"Usage:  @oname <name> | @oname";"  Change or show the exterior display name of this space object.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;elseif (!args)  player:tell("Exterior display name of ", this.name, " (", this, ") is ", this:oname(), ".");else  name = argstr;  if (length(name) > 40)    return player:tell(tostr("That name is too long. The maximum number of characters allowed in a name is ", $login.max_player_name, "."));  endif  this.oname = name;  player:tell("Exterior display name of ", this.name, " (", this, ") changed to ", name, ".");endif"LMB #23230 01/22/2011";.@args #7466:"@odesc*ription" any any any@program #7466:@odescription"Usage:  @odescription <description> | @odescription";"  Change or show the exterior display description of this space object. Due to permissions checking with the note editor, I cannot make this any more robust. Sorry.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;elseif (!args)  player:tell("Exterior display description of ", this.name, " (", this, ") is:");  player:tell_lines(this:odescription());  if ($string_utils:find_prefix($command_utils:read(player:tell("Do you want to edit this description?")), {"yes", "1"}))    desc = $command_utils:read_lines();    this.odescription = desc;    player:tell("Exterior display description of ", this.name, " (", this, ") changed.");  else    player:tell("Exterior display description unchanged.");  endifelse  desc = argstr;  this.odescription = desc;  player:tell("Exterior display description of ", this.name, " (", this, ") changed.");endif"LMB #23230 01/22/2011";.@args #7466:"speed_limit" this none this@program #7466:speed_limitph = this:universe();if (ph == this.universe:title())  return 10.0;else  index = ph in this.universe.pnames;  sl = tofloat(this.universe.pvalues[index][4]);  return (sl == 0.0) ? 10.0 | sl;endif"LMB #23230 02/13/2011";."***finished***@dump #7771@chmod #7771."trusted_ships" ;#7771.("trusted_ships") = {}@chmod #7771."not_trusted_ship_msg" r;#7771.("not_trusted_ship_msg") = "Permission denied. Your ship is not trusted by %t."@chmod #7771."dock" ;#7771.("dock") = 0;#7771.("oname") = "[MOOSpace] Generic Heavenly Body";#7771.("odescription") = {"This is the parent of all heavenly bodies in the MOOSpace system. To create one for yourself, seek out the planet-builders of Magrathea."};#7771.("help_msg") = "A heavenly body can be a planet, space station, asteroid, or anything else that might be found floating in the cosmic void. Ships can land on it. Exploring the heavenly bodies of the universe is one of the primary raisons d'etre of MOOSpace. If you'd like to build your own planet, you must first visit Magrathea.";#7771.("user_verbs") = {"@permit", "@oname", "@odescription", "@cloak", "@add-ship", "@remove-ship", "@ships", "@dock"};#7771.("tell_exits") = 1;#7771.("w_time") = 949737600;#7771.("w_prog") = 4;#7771.("entrances") = {};#7771.("blessed_task") = 1815215361;#7771.("exits") = {};#7771.("blessed_object") = #119;#7771.("key") = 0;#7771.("aliases") = {"[MOOSpace] Generic Heavenly Body", "ghb"};#7771.("description") = "This is the parent of all heavenly bodies in the MOOSpace system. To create one for yourself, seek out the planet-builders of Magrathea.";#7771.("object_size") = {9930, 1297703991}"#7771.("original_owner") => E_PERM (Permission denied)"#7771.("days_left") => E_PERM (Permission denied);#7771.("creation_date") = 969427645"#7771.("queued_task_limit") => E_PERM (Permission denied)@args #7771:"@add-sh*ip @addsh*ip @remove-sh*ip @removesh*ip @rm-sh*ip @rmsh*ip" any none none@program #7771:@add-ship"Usage:  @add-ship | @remove-ship <ship name or object number>";"  Grants or rescinds landing permission to a spaceship, which must be a descendant of Generic Interstellar Craft. If no ships are specifically given landing permission, then all ships have permission. If any ships are given permission with this command, only those ships will then have landing permission.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be modified. Type 'help #13676' for details.");endifif (!dobjstr)  return player:tell("Usage: @", (verb[2] == "r") ? "remove-ship" | "add-ship", " <ship name or object number>");endiftarget = (toobj(dobjstr) != #0) ? toobj(dobjstr) | dobjstr;if (verb[2] == "r")  if (typeof(target) == OBJ)    result = (target in this:trusted_ships()) ? target | $failed_match;  elseif (typeof(target) == STR)    result = $string_utils:match(target, this:trusted_ships(), "name");  endifelseif (verb[2] == "a")  if (typeof(target) == OBJ)    result = $object_utils:isa(target, #19950) ? target | $failed_match;  elseif (typeof(target) == STR)    result = $string_utils:match(target, $object_utils:descendants(#19950), "name");  endifendifif (result in this:trusted_ships())  if (verb[2] == "r")    this.trusted_ships = setremove(this.trusted_ships, result);    player:tell(result:title(), " is no longer permitted to ", $object_utils:isa(this, #19950) ? "dock at " | "land on ", this:title(), ".");    return;  endif  player:tell(result:title(), " has already been granted landing permission for ", this:title(), ".");elseif ((result == $failed_match) || (!result:valid_space_object()))  player:tell(dobjstr, " either doesn't exist or is not a valid ship.");elseif (result == $ambiguous_match)  player:tell(dobjstr, " can refer to more than one ship. Be more specific or use the ship's object number instead.");elseif (verb[2] == "a")  this.trusted_ships = {@this.trusted_ships, result};  land_or_dock = $object_utils:isa(this, #19950) ? "dock at" | "land on";  player:tell(result:title(), " is now permitted to ", land_or_dock, " ", this:title(), ".");endif"LMB #23230 02/12/2011";.@args #7771:"@ships" none none none@program #7771:@ships"Usage:  @ships";"  Displays the names of the ships currently permitted to land on this ship or heavenly body. If no ships are specified, then all ships are permitted to land.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be operated. Type 'help #13676' for details.");endifships = this.trusted_ships;if (ships)  player:tell($string_utils:title_list(ships), (length(ships) == 1) ? " is " | " are ", "permitted to ", $object_utils:isa(this, #19950) ? "dock at " | "land on ", this:title(), ".");else  player:tell("Any ship may ", $object_utils:isa(this, #19950) ? "dock at " | "land on ", this:title(), ".");endif"LMB #23230 02/12/2011";.@args #7771:"not_trusted_ship_msg" this none this@program #7771:not_trusted_ship_msg"Verb -> property matching for messages defined on this object not defined on parents.";return $object_utils:has_property(this, verb) ? (msg = this.(verb)) ? $string_utils:pronoun_sub(msg) | "" | "";"LMB #23230 01/19/2011";.@args #7771:"trusted_ships" this none this@program #7771:trusted_ships"Returns this.trusted_ships after cleaning it up.";if ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endiftrusted_list = {};trusted_ships = this.trusted_ships;for s in (trusted_ships)  if ((((typeof(s) == OBJ) && $recycler:valid(s)) && $object_utils:isa(s, #19950)) && s:valid_space_object())    trusted_list = {@trusted_list, s};  else    trusted_ships = setremove(trusted_ships, s);  endif  $command_utils:suspend_if_needed(0);endforthis.trusted_ships = trusted_ships;return trusted_list;"LMB #23230 02/10/2011";.@args #7771:"initialize" this none this@program #7771:initializeif ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endiffork (0)  this.oname = this.name;  this.odescription = {"You see nothing special."};  origin = this.location;  this:moveto(#16345);  if (this.location == origin)    return player:tell("Automatic initialization failed. You must move ", this:title(), " to the Hyperspace Planet Factory on Magrathea yourself in order to initialize it. Check your moveto protection, because if this verb couldn't move it, your heavenly body may not function properly in MOOSpace.");  endif  player:tell(((this:title() + " is now under construction at the Hyperspace Planet Factory on Magrathea. Please ") + ((player.location != #16345) ? "go to Magrathea " | "type 'build <heavenly body> in <universe>' ")) + "to complete the initialization procedure.");  this.location:announce_all("The framework of a new heavenly body with the unusual name \"", this:title(), "\" appears in the factory.");endfork"LMB #23230 02/14/2011";.@args #7771:"@dock" any any any@program #7771:@dock"Usage:  @dock <on> or <off> | @dock";"  Turns the dock on or off. If the dock is off, ships will not be able to land here. Without 'on' or 'off' as an argument, reports the current dock status.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be modified. Type 'help #13676' for details.");endifif (!args)  player:tell((this:title() + "'s dock is currently ") + ((this.dock == 0) ? "off." | "on."));elseif (argstr == "on")  if (this.dock != 0)    player:tell(this:title(), "'s dock is already on.");  else    this.dock = this;    player:tell(this:title(), "'s dock is now on.");    this:announce(player:title(), " has turned on ", this:title(), "'s dock.");  endifelseif (argstr == "off")  if (this.dock == 0)    player:tell(this:title(), "'s dock is already off.");  else    this.dock = 0;    player:tell(this:title(), "'s dock is now off.");    this:announce(player:title(), " has turned off ", this:title(), "'s dock.");  endifelse  player:tell("Usage:  @dock <on> or <off> | @dock");endif"LMB #23230 02/12/2011";.@args #7771:"initialize" this none this"***finished***@dump gaa;#9602.("oname") = "[MOOSpace] Generic Astrophysical Anomaly";#9602.("odescription") = {"This is the parent of all astrophysical anomalies in the MOOSpace system. To create one for yourself, you'll have to do lots of exploring."};#9602.("help_msg") = "An astrophysical anomaly can be a wormhole, black hole, cosmic filament (?) or any other weird stationary thing floating in space. Ships cannot land on them but can interact with them in other ways. If you'd like to create your own, you'll have to discover how for yourself.";#9602.("user_verbs") = {"@permit", "@oname", "@odescription", "@cloak", "approach"};#9602.("tell_exits") = 1;#9602.("w_time") = 949132800;#9602.("w_prog") = 3;#9602.("entrances") = {};#9602.("blessed_task") = 1815215361;#9602.("exits") = {};#9602.("blessed_object") = #119;#9602.("key") = 0;#9602.("aliases") = {"[MOOSpace] Generic Astrophysical Anomaly", "gaa"};#9602.("description") = "This is the parent of all astrophysical anomalies in the MOOSpace system. To create one for yourself, you'll have to do lots of exploring.";#9602.("object_size") = {3631, 1297703991}"#9602.("original_owner") => E_PERM (Permission denied)"#9602.("days_left") => E_PERM (Permission denied);#9602.("creation_date") = 969427652"#9602.("queued_task_limit") => E_PERM (Permission denied)@args #9602:"app*roach" this none none@program #9602:approach"Usage:  approach <this>";"  Activates this astrophysical anomaly. The results are unpredictable.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;endifif (this:valid_space_object())  if (!this:activate())    player:tell("Nothing happens.");  endifendif"LMB #23230 01/23/2011";.@args #9602:"activate" this none this@program #9602:activate"You must create your own version of this verb if you want this anomaly to do something.";return 0;"LMB #23230 01/22/2011";."***finished***@dump gw@chmod #21733."activate_msg" r;#21733.("activate_msg") = "You command %l to cross the event horizon of %t!"@chmod #21733."oactivate_msg" r;#21733.("oactivate_msg") = "%n commands %l to cross the event horizon of %t!"@chmod #21733."destination" ;#21733.("destination") = #16043@chmod #21733."mouth" ;#21733.("mouth") = {0.0, 0.0, 0.0}@chmod #21733."emerge_msg" r;#21733.("emerge_msg") = "%l emerges from %t into"@chmod #21733."oemerge_msg" r;#21733.("oemerge_msg") = "%l emerges from %t into";#21733.("oname") = "[MOOSpace] Generic Wormhole";#21733.("odescription") = {"This is a parent object for wormholes in the MOOSpace system. A wormhole can lead to another part of its universe or to an entirely different universe."};#21733.("help_msg") = "A wormhole is what it sounds like: a conduit between different parts of the universe or even between entirely different universes. If you'd like to create your own, you'll have to discover how for yourself.";#21733.("user_verbs") = {"@permit", "@oname", "@odescription", "@cloak", "approach", "@set-universe"};#21733.("tell_exits") = 1;#21733.("w_time") = 953366400;#21733.("w_prog") = 4;#21733.("entrances") = {};#21733.("blessed_task") = 1815215361;#21733.("exits") = {};#21733.("blessed_object") = #119;#21733.("key") = 0;#21733.("aliases") = {"[MOOSpace] Generic Wormhole", "gw"};#21733.("description") = "This is a parent object for wormholes in the MOOSpace system. A wormhole can lead to another part of its universe or to an entirely different universe.";#21733.("object_size") = {6522, 1297703991}"#21733.("original_owner") => E_PERM (Permission denied)"#21733.("days_left") => E_PERM (Permission denied);#21733.("creation_date") = 970429962"#21733.("queued_task_limit") => E_PERM (Permission denied)@args #21733:"activate" this none this@program #21733:activateif (this.permitted && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;endifship = player.location;player:tell(this:activate_msg());ship:announce(this:oactivate_msg());if ($object_utils:isa(ship, #19950))  ship:moveto(this);  if (ship.location == this)    ship.in_range = this;    ship:range_update(this.in_range);    suspend(5);    ship:announce_all(this:description());    suspend(5);    if ($object_utils:isa(this.destination, #16043) && (typeof(this.mouth) == LIST))      ship:moveto(this.destination);      if (ship.location == this.destination)        ship.universe = this.destination;        ship.coordinates = this.mouth;        ship:universe(1);        player:tell(((this:emerge_msg() + " ") + ship:universe()) + ".");        ship:announce(((this:oemerge_msg() + " ") + ship:universe()) + ".");        ship:announce_lines(ship:scan_report());      else        ship:moveto(this.universe);        ship:universe(1);        player:tell(((this:emerge_msg() + " ") + ship:universe()) + ".");        ship:announce(((this:oemerge_msg() + " ") + ship:universe()) + ".");        ship:announce_lines(ship:scan_report());        ship:range_update(ship.in_range);      endif      return 1;    endif  endifendifreturn 0;"LMB #23230 02/13/2011";.@args #21733:"activate_msg oactivate_msg emerge_msg oemerge_msg" this none this@program #21733:activate_msg"Verb -> property matching for messages defined on this object not defined on parents.";return $object_utils:has_property(this, verb) ? (msg = this.(verb)) ? $string_utils:pronoun_sub(msg) | "" | "";"LMB #23230 01/22/2011";.@args #21733:"@set-uni*verse @setuni*verse" any any any@program #21733:@set-universe"Usage:  @set-universe <destination universe>";" Sets the destination universe of this wormhole. That is, the universe a ship will enter upon emerging from the wormhole, if different from the current universe.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be modified. Type 'help #13676' for details.");endifif (!args)  return player:tell("Destination universe currently set to ", this.destination:title(), ".");endifif (typeof($code_utils:toobj(argstr)) != ERR)  universe = $code_utils:toobj(argstr);  if ($object_utils:isa(universe, #16043))    this.destination = universe;    player:tell("Destination universe set to ", universe:title(), ".");  else    player:tell(universe, " is not a known universe.");  endifelse  universe = $string_utils:match(argstr, $object_utils:descendants(#16043), "name");  if (universe == $ambiguous_match)    player:tell("'", argstr, "' can refer to more than one universe (what are the odds of that?). Please be more specific.");  elseif (universe == $failed_match)    player:tell("'", argstr, "' is not the name of any known universe.");  else    this.destination = universe;    player:tell("Destination universe set to ", universe:title(), ".");  endifendif"LMB #23230 02/12/2011";.@args #21733:"initialize" this none this@program #21733:initialize"LMB #23230 01/22/2011";."***finished***@dump #19950@chmod #19950."heading" ;#19950.("heading") = 0@chmod #19950."bearing" ;#19950.("bearing") = {0.0, 0.0, 0.0}@chmod #19950."speed" ;#19950.("speed") = 1.0@chmod #19950."in_range" ;#19950.("in_range") = {{}, {}, {}, {}}@chmod #19950."engage_origin_msg" r;#19950.("engage_origin_msg") = "You say, \"Engage!\" and %t powers up its engines."@chmod #19950."oengage_origin_msg" r;#19950.("oengage_origin_msg") = "%n says, \"Engage!\" and %t powers up its engines."@chmod #19950."engage_arrive_msg" r;#19950.("engage_arrive_msg") = "You have brought %t safely to its destination."@chmod #19950."oengage_arrive_msg" r;#19950.("oengage_arrive_msg") = "%t arrives safely at its destination."@chmod #19950."hail_origin_msg" r;#19950.("hail_origin_msg") = "You hail %d with: "@chmod #19950."ohail_origin_msg" r;#19950.("ohail_origin_msg") = "%n hails %d with: "@chmod #19950."hail_receive_msg" r;#19950.("hail_receive_msg") = "%n hails from %t: "@chmod #19950."commander_msg" r;#19950.("commander_msg") = "The crew stands at attention as you enter the bridge."@chmod #19950."ocommander_msg" r;#19950.("ocommander_msg") = "The crew stands at attention as %n enters the bridge."@chmod #19950."launch_start_msg" r;#19950.("launch_start_msg") = "You launch %t into space."@chmod #19950."olaunch_start_msg" r;#19950.("olaunch_start_msg") = "%n launches %t into space."@chmod #19950."launch_start_outside_msg" r;#19950.("launch_start_outside_msg") = "%t rises into the air and blasts off into space."@chmod #19950."launch_end_msg" r;#19950.("launch_end_msg") = "%t arrives safely in"@chmod #19950."olaunch_end_msg" r;#19950.("olaunch_end_msg") = "%n has successfully launched %t into"@chmod #19950."board_msg" r;#19950.("board_msg") = "You board %t."@chmod #19950."oboard_msg" r;#19950.("oboard_msg") = "%n boards %t."@chmod #19950."oboard_depart_msg" r;#19950.("oboard_depart_msg") = "%n has boarded %t."@chmod #19950."disembark_msg" r;#19950.("disembark_msg") = "You have disembarked from %t."@chmod #19950."odisembark_msg" r;#19950.("odisembark_msg") = "%n has disembarked from %t for %l."@chmod #19950."odisembark_arrive_msg" r;#19950.("odisembark_arrive_msg") = "%n disembarks from %t."@chmod #19950."land_start_msg" r;#19950.("land_start_msg") = "You lower the landing gear and prepare to land %t on"@chmod #19950."oland_start_msg" r;#19950.("oland_start_msg") = "%n lowers the landing gear and prepares to land %t on"@chmod #19950."land_end_msg" r;#19950.("land_end_msg") = "You bring %t in for a smooth landing on"@chmod #19950."oland_end_msg" r;#19950.("oland_end_msg") = "%n brings %t in for a smooth landing on"@chmod #19950."land_end_outside_msg" r;#19950.("land_end_outside_msg") = "%t soars in from outer space and lands gracefully nearby."@chmod #19950."engines" ;#19950.("engines") = 0@chmod #19950."explored" ;#19950.("explored") = {}@chmod #19950."scan_msg" r;#19950.("scan_msg") = "A beam of light from %t scans you."@chmod #19950."oscan_msg" r;#19950.("oscan_msg") = "A beam of light from %t scans"@chmod #19950."disengage_msg" r;#19950.("disengage_msg") = "You disengage the engines and bring %t to a full stop."@chmod #19950."odisengage_msg" r;#19950.("odisengage_msg") = "%n disengages the engines and brings %t to a full stop."@chmod #19950."stars" ;#19950.("stars") = 1@chmod #19950."sensors" ;#19950.("sensors") = 1;#19950.("oname") = "[MOOSpace] Generic Interstellar Craft";#19950.("odescription") = {"This is the parent of all spaceships in the MOOSpace system. To get one for yourself, @create a new object using this generic and then visit the San Francisco Shipyards adjacent to Starfleet Headquarters to complete its initialization."};#19950.("help_msg") = "For general piloting instructions, please visit Starfleet Academy. For help with a specific command, see the help documentation for that verb.";#19950.("user_verbs") = {"@permit", "@oname", "@odescription", "@cloak", "@add-ship", "@remove-ship", "@ships", "enter", "exit", "launch", "land", "scan", "location", "bearing", "heading", "eta", "speed", "engage", "disengage", "hail", "@stars", "@sensors"};#19950.("tell_exits") = 1;#19950.("noperms_msg") = "You are not authorized to operate %t.";#19950.("w_time") = 951465600;#19950.("entrances") = {};#19950.("blessed_task") = 1815215361;#19950.("exits") = {};#19950.("blessed_object") = #119;#19950.("key") = 0;#19950.("aliases") = {"[MOOSpace] Generic Interstellar Craft", "gic"};#19950.("description") = "This is the parent of all spaceships in the MOOSpace system. To get one for yourself, @create a new object using this generic and then visit the San Francisco Shipyards adjacent to Starfleet Headquarters to complete its initialization.";#19950.("object_size") = {50037, 1297703991}"#19950.("original_owner") => E_PERM (Permission denied)"#19950.("days_left") => E_PERM (Permission denied);#19950.("creation_date") = 969427497"#19950.("queued_task_limit") => E_PERM (Permission denied)@args #19950:"laun*ch" none none none@chmod #19950:launch rxd@program #19950:launch"Usage:  launch";"  Launches this ship into whatever universe whatever heavenly body it is landed on is in.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be launched. Type 'help #13676' for details.");elseif ($object_utils:isa(this.location, #16043))  player:tell(this:title(), " has already been launched into ", this:universe(), ".");else  player:tell(this:launch_start_msg());  this:announce(this:olaunch_start_msg());  this.location:announce_all(this:launch_start_outside_msg());  if (!this:command_launch())    player:tell("Launch failed. There must be a permissions conflict somewhere.");    this:announce("Launch attempt failed.");    return;  else    this:announce_lines(this:scan_report());    player:tell(((this:launch_end_msg() + " ") + this:universe()) + ".");    this:announce(((this:olaunch_end_msg() + " ") + this:universe()) + ".");  endifendif"LMB #23230 02/13/2011";.@args #19950:"command_launch" this none this@program #19950:command_launchif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifthis:moveto(this.universe);if (this.location == this.universe)  $command_utils:suspend(1);  old_range = this.in_range;  this:universe(1);  this:sensor_sweep();  this:range_update(old_range);  return 1;else  return 0;endif"LMB #23230 02/13/2011";.@args #19950:"sensor_sweep" this none this@program #19950:sensor_sweepif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifif (typeof(this.in_range) != LIST)  this.in_range = {{}, {}, {}, {}};endifif (!$object_utils:isa(this.location, #16043))  return;endifset = {};contents = setremove(this.universe.contents, this);for o in (contents)  if (this:valid_space_object(o) && (!o.cloaked))    set = {@set, o};  endif  $command_utils:suspend_if_needed(0);endformy_coordinates = this.coordinates;same = {};near = {};med = {};long = {};for x in (set)  their_coordinates = x.coordinates;  d = this.universe:distance(my_coordinates, their_coordinates);  if ((d <= (1.0 * this:speed_limit())) && (d <= (1.0 * x:speed_limit())))    same = {@same, x};    if (d == 0.0)      this:exp(x);    endif  elseif ((d <= (10.0 * this:speed_limit())) && (d <= (10.0 * x:speed_limit())))    near = {@near, x};  elseif ((d <= (50.0 * this:speed_limit())) && (d <= (50.0 * x:speed_limit())))    med = {@med, x};  elseif ((d <= (100.0 * this:speed_limit())) && (d <= (100.0 * x:speed_limit())))    long = {@long, x};  endif  $command_utils:suspend_if_needed(0);endforthis.in_range = {same, near, med, long};"LMB #23230 02/14/2011";.@args #19950:"sensor_update" this none this@program #19950:sensor_updateif ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endifrange = this.in_range;{ship, switch} = args;if (switch == 0)  for r in [1..4]    for s in (range[r])      if (s == ship)        range[r] = setremove(range[r], s);        break r;      endif      $command_utils:suspend_if_needed(0);    endfor    $command_utils:suspend_if_needed(0);  endfor  this.in_range = range;elseif (switch == 1)  ship_range = ship.in_range;  for r in [1..4]    for s in (ship_range[r])      if (s == this)        range[r] = setadd(range[r], ship);        break r;      endif      $command_utils:suspend_if_needed(0);    endfor    $command_utils:suspend_if_needed(0);  endforendifthis.in_range = range;"LMB #23230 01/23/2011";.@args #19950:"look_self" this none this@program #19950:look_selfif (player.location == this)  pass(@args);  if (!$object_utils:isa(this.location, #16043))    viewscreen = ("[On Viewscreen: " + this.location:title()) + "]";    player:tell(viewscreen);  else    if (this.engines)      player:tell((((((this:title() + " is currently traveling with a bearing of ") + this:bearing_report()) + (this:heading_report() ? (" toward " + this:heading_report()) + " " | " ")) + "at warp ") + tostr(this.speed)) + ".");    endif    viewscreen = ((("[On Viewscreen: " + this:universe()) + " ") + this:location_report()) + "]";    player:tell(viewscreen);  endifelse  pass(@args);endif"LMB #23230 01/22/2011";.@args #19950:"range_update" this none this@program #19950:range_updateif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endif"This code is mostly a jury-rigged tangle of ten-year old workarounds and locked-in fixes. It can no doubt be rewritten more elegantly. Next version, perhaps. Or next lifetime.";NewStuff = {};OldStuff = {};old_range = (typeof(args[1]) == LIST) ? $list_utils:flatten(args[1]) | args[1];if (typeof(old_range) == OBJ)  range = old_range;  total_range = $list_utils:flatten(this.in_range);else  range = $list_utils:flatten(this.in_range);  total_range = $list_utils:remove_duplicates($set_utils:union(range, old_range));endiffor x in (total_range)  if ((($object_utils:isa(x, #19950) && $object_utils:isa(x.location, #16043)) && $set_utils:intersection(x.contents, connected_players())) && this:valid_space_object(x))    xrange = $list_utils:flatten(x.in_range);    if ((this in xrange) && $object_utils:isa(this.location, #7771))      if (x.sensors)        x:announce_all((((this:oname() + " has ") + ($object_utils:isa(this.location, #19950) ? "docked at " | "landed on ")) + this.location:oname()) + ".");      endif      x:sensor_update(this, 0);    elseif ((this in xrange) && $object_utils:isa(this.location, #21733))      if (x.sensors)        x:announce_all(((this:oname() + " has crossed the event horizon of ") + this.location:oname()) + ".");      endif      x:sensor_update(this, 0);    elseif ((typeof(range) == OBJ) && $object_utils:isa(this.location, #16043))      if (x.sensors)        msg = $object_utils:isa(range, #21733) ? " has emerged from " + range:oname() | (" has launched into space from " + range:oname());        x:announce_all((this:oname() + msg) + ".");      endif      x:sensor_update(this, 1);    else      d = this.universe:distance(this.coordinates, x.coordinates);      if (((d <= (1.0 * this:speed_limit())) && (d <= (1.0 * x:speed_limit()))) && (this.cloaked == 0))        if (x.sensors)          x:announce_all(this:oname(), " has arrived in this sector.");        endif      endif      if ((((d <= (100.0 * this:speed_limit())) && (!(this in xrange))) && (d <= (100.0 * x:speed_limit()))) && (this.cloaked == 0))        if (x.sensors)          x:announce_all(this:oname(), " has entered sensor range.");        endif        if (this.sensors)          this:announce_all(x:oname(), " is now in sensor range.");        endif        x:sensor_update(this, 1);      elseif ((((d > (100.0 * this:speed_limit())) && (d > (100.0 * x:speed_limit()))) || (this.cloaked == 1)) && (this in xrange))        if (x.sensors)          x:announce_all(this:oname(), " is no longer in sensor range.");        endif        if (this.sensors)          this:announce_all(x:oname(), " is no longer in sensor range.");        endif        x:sensor_update(this, 0);      endif    endif  elseif ($object_utils:isa(x.location, #16043) && this:valid_space_object(x))    d = this.universe:distance(this.coordinates, x.coordinates);    if (((d <= (100.0 * this:speed_limit())) && (typeof(old_range) == LIST)) && (!(x in old_range)))      if (d <= (100.0 * x:speed_limit()))        NewStuff = {@NewStuff, this:name_tag(x)};      endif    elseif (((d > (100.0 * this:speed_limit())) && (typeof(range) == LIST)) && (!(x in range)))      if (d > (100.0 * x:speed_limit()))        OldStuff = {@OldStuff, this:name_tag(x)};      endif    endif  endif  $command_utils:suspend_if_needed(0);endforif (this.sensors && (typeof(old_range) != OBJ))  if (NewStuff)    this:announce_all($string_utils:english_list(NewStuff), (length(NewStuff) == 1) ? " is " | " are ", "now in sensor range.");  endif  if (OldStuff)    this:announce_all($string_utils:english_list(OldStuff), (length(OldStuff) == 1) ? " is " | " are ", "no longer in sensor range.");  endifendif"LMB #23230 02/13/2011";.@args #19950:"sc*an" any none none@chmod #19950:scan rxd@program #19950:scan"Usage:  scan <any>";"  Without an argument, scans the local region of space, returning a description of the ship's surroundings, the names of any objects in sensor range, and the ship's absolute location with respect to the origin in the format (azimuth mark inclination at distance). With an object in range as an argument, scans that object. You can also scan visible phenomena more closely, like looking at details in a room description. Sensor range may be adversely affected by various interstellar phenomena.";if (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be operated. Type 'help #13676' for details.");endifthis:sensor_sweep();this:announce(player:title(), " performs a sensor sweep of ", this:universe(), ".");if (!args)  if ($object_utils:isa(this.location, #16043))    player:tell_lines(this:scan_report());  else    this:announce_lines(this:look_outside());    this.location:announce_all(this:oscan_msg(), " ", this.location:title(), ".");  endifelse  if ($object_utils:isa(this.location, #16043))    "Handle phenomenon details.";    phenomenon = this:universe();    ph_index = (phenomenon == this.universe:title()) ? 0 | (phenomenon in this.universe.pnames);    if (ph_index && (details = this.universe.pdetails[ph_index]))      match = $string_utils:find_prefix(argstr, details[1]);      if (match)        return player:tell_lines(details[2][match]);      elseif (ph = $string_utils:find_prefix(argstr, this.universe.pnames))        return player:tell_lines(this.universe.pdescs[ph]);      elseif ($string_utils:find_prefix(argstr, this.universe:title()))        player:tell_lines(this.universe:description());      endif    endif    range = $list_utils:flatten(this.in_range);    match = $string_utils:match(argstr, range, "oname");    if ((match == $failed_match) || (!this:valid_space_object(match)))      player:tell("There is no '", argstr, "' in sensor range.");    elseif (match == $ambiguous_match)      player:tell("'", argstr, "' can refer to more than one object in sensor range. Be more specific.");    else      player:tell(match:oname(), " ", match:location_report(), " is approximately ", tostr(this.universe:distance(this.coordinates, match.coordinates)), " light years away in ", match:universe(), ".");      player:tell_lines(match:odescription());      if ($object_utils:isa(match, #7771) && (!$object_utils:isa(match, #19950)))        player:tell(match:oname(), " is a heavenly body. Perhaps you can land on it?");      elseif ($object_utils:isa(match, #9602))        player:tell(match:oname(), " is some sort of astrophysical anomaly. Perhaps you can approach it and learn more about it?");      elseif ($object_utils:isa(match, #19950) && match.engines)        player:tell(match:oname(), " is traveling with a bearing of ", match:bearing_report(), " at warp ", match.speed, ".");      endif    endif  else    range = this.location.contents;    match = $string_utils:match(argstr, range, "aliases");    if (match == $failed_match)      player:tell("There is no '", argstr, "' in ", this.location:title(), ".");    elseif (match == $ambiguous_match)      player:tell("'", argstr, "' can refer to more than one object in ", this.location:title(), ". Be more specific.");    else      match:look_self();      if (is_player(match) && (match in connected_players()))        match:tell(this:scan_msg());        match.location:announce_all_but({match}, ((this:oscan_msg() + " ") + match:title()) + ".");      endif    endif  endifendif"LMB #23230 02/13/2011";.@args #19950:"lan*d doc*k" any none none@program #19950:land"Usage:  land <location>";"  Lands the ship at the specified location, if possible. Only trusted ships may land at locations where the trusted ship list is not empty.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be operated. Type 'help #13676' for details.");elseif (!$object_utils:isa(this.location, #16043))  player:tell(this:title(), " is already landed on ", this.location:title(), ".");elseif (!args)  return player:tell("Usage:  land <location>");else  range = this.in_range[1];  planet = argstr;  match = $string_utils:match(planet, range, "oname");  all_range = $list_utils:flatten(this.in_range);  out_of_range = $string_utils:match(planet, $set_utils:difference(all_range, range), "oname");  if (out_of_range)    return player:tell(this:title(), " must be in the same sector as ", out_of_range:oname(), " in order to attempt landing on it.");  endif  if ((match == $failed_match) || (!this:valid_space_object(match)))    player:tell("There is no '", planet, "' in this sector.");  elseif (match == $ambiguous_match)    player:tell("'", planet, "' can refer to more than one object in sensor range. Be more specific.");  elseif (this.universe:distance(this.coordinates, match.coordinates) != 0.0)    player:tell(this:title(), " must be closer to ", match:oname(), " in order to attempt landing on it.");  elseif (!$object_utils:isa(match, #7771))    player:tell(match:oname(), " cannot be landed on.");  elseif (match:trusted_ships() && (!(this in setadd(match:trusted_ships(), #8510))))    player:tell(this:title(), " is not permitted to land at ", match:oname(), ".");  elseif (match.dock == 0)    player:tell((((this:title() + " cannot ") + ($object_utils:isa(match, #19950) ? "dock with " | "land on ")) + match:oname()) + ".");  else    player:tell(((this:land_start_msg() + " ") + match:oname()) + ".");    this:announce(((this:oland_start_msg() + " ") + match:oname()) + ".");    if (this:command_land(match))      this:announce_lines(this:look_outside());      player:tell(((this:land_end_msg() + " ") + match:oname()) + ".");      this:announce(((this:oland_end_msg() + " ") + match:oname()) + ".");      this.location:announce(this:land_end_outside_msg());    else      player:tell(this:title(), " cannot seem to land at ", match:oname(), ". There might be a permissions problem or else ", match:oname(), " doesn't want you.");      this:announce($object_utils:isa(match, #19950) ? "Dock" | "Land", " attempt failed.");    endif  endifendif"LMB #23230 02/14/2011";.@args #19950:"command_land" this none this@program #19950:command_landif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifplanet = args[1];if (planet.dock == 0)  return 0;endifthis:moveto(planet.dock);if (this.location == planet)  $command_utils:suspend(1);  this:range_update(this.in_range);  this.in_range = planet;  return 1;else  return 0;endif"LMB #23230 02/12/2011";.@args #19950:"look_outside" this none this@program #19950:look_outsideif ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endifdesc = this.location:description();view = {this.location:title()};if (desc)  view = {view, @desc};else  view = {@view, "You see nothing special."};endifplayers = {};things = {};for x in (this.location:contents())  if (is_player(x))    players = {@players, x};  else    things = {@things, x};  endif  $command_utils:suspend_if_needed(0);endforif (things)  view = {@view, ("You see " + $string_utils:title_list(setremove(things, this))) + " here."};endifif (players)  is_are = (length(players) == 1) ? " is" | " are";  view = {@view, ($string_utils:title_listc(players) + is_are) + " here."};endifreturn $list_utils:flatten(view);"LMB #23230 02/13/2011";.@args #19950:"ent*er bo*ard go" this none none@program #19950:enter"Usage:  enter <this>";"  Board the ship. If you have :moveto() protection, this command may not function.";if ((player.location == this) || $object_utils:isa(this.location, #16043))  player:tell("I don't understand that.");else  player:moveto(this);  if (player.location != this)    player:tell("You seem unable to board ", this:oname(), ". Make sure you don't have moveto() protection.");  else    player:tell(this:board_msg());    this:announce(this:oboard_msg());    this.location:announce(this:oboard_depart_msg());  endifendif"LMB #23230 02/02/2011";.@args #19950:"ex*it disem*bark out" none none none@program #19950:exit"Usage:  exit";"  Exit the ship. You cannot exit a ship while it is in space.";if (player.location != this)  return player:tell("I don't understand that.");endifif ($object_utils:isa(this.location, #16043))  player:tell("You cannot exit ", this:title(), " until it lands.");else  player:moveto(this.location);  if (player.location == this)    player:tell("You seem unable to exit ", this:title(), ". Make sure you don't have moveto() protection.");  else    player:tell(this:disembark_msg());    this:announce(this:odisembark_msg());    this.location:announce(this:odisembark_arrive_msg());  endifendif"LMB #23230 01/20/2011";.@args #19950:"enterfunc confunc" this none this@program #19950:enterfuncif (is_player(caller) && this:perm_check(caller))  player:tell(this:commander_msg());  this:announce(this:ocommander_msg());endifpass(@args);"LMB #23230 02/03/2011";.@args #19950:"sp*eed warp wp" any none none@program #19950:speed"Usage:  speed | speed <new speed>";"  Displays the current speed of the ship or sets a new one. In normal space, the maximum speed is warp 10.0. In some areas of space, however, the ship may be forced to travel more slowly.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be operated. Type 'help #13676' for details.");endifif (!args)  player:tell(this:title(), " is set to travel at warp ", this.speed, " and is currently capable of traveling at a maximum speed of warp ", this:speed_limit(), ".");else  speed = tofloat(argstr);  if ((speed < 1.0) || (speed > 10.0))    player:tell("'", argstr, "' is an incorrect speed setting. ", this:title(), " can only be set to travel between warp 1 and warp 10.");  elseif (speed > this:speed_limit())    player:tell(this:title(), " cannot travel faster than warp ", tostr(this:speed_limit()), " inside ", this:universe(), ".");  else    this.speed = tofloat(speed);    this.speed = speed;    player:tell(this:title(), " is now set to travel at warp ", speed, ".");    this:announce(player:title(), " set ", this:title(), " to travel at warp ", speed, ".");  endifendif"LMB #23230 02/13/2011";.@args #19950:"head*ing bear*ing" any any any@program #19950:heading"Usage:  bearing <radius> <azimuth> <inclination> | heading <destination>";"  There are two ways to navigate in MOOSpace. The first is to enter a bearing, which is a specific location to which you want to travel expressed in spherical coordinates. The radius is the absolute distance of the location from the origin point, the azimuth is the angle >= 0.0 and < 360.0 degrees between, e.g., the line pointing toward the center of the galaxy and the ship's direction of travel, and the inclination is the angle >= 0.0 and <= 180.0 degrees between, e.g., the line pointing toward the north pole of the galaxy and the ship's direction of travel, with 90.0 degrees being level with, e.g. the galactic plane (or however you want to imagine the structure of the universe). If you want to travel on a true bearing, you can enter a very high radius value, though it takes about a day to travel 100,000 light years if the task isn't killed. The second way to navigate is to enter a heading, which in this system is simply the name of a specific object, e.g. a planet or other heavenly body, toward which you wish to navigate. In order to navigate with a heading, you must have visited the named object before.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be operated. Type 'help #13676' for details.");elseif (!$object_utils:isa(this.location, #16043))  return player:tell(this:title(), " must be launched before its navigation system can be used.");elseif (!args)  msg = (this:title() + ((verb[1] == "b") ? " has a bearing of " + this:bearing_report() | (this:heading_report() ? " is heading toward " + this:heading_report() | " does not currently have a heading"))) + ".";  return player:tell(msg);elseif ((verb[1] == "b") && (length(args) == 3))  {r, theta, phi} = args;  r = `tofloat(r) ! E_INVARG => 0';  theta = `tofloat(theta) ! E_INVARG => 0';  phi = `tofloat(phi) ! E_INVARG => 0';  if ((((((((r == 0) || (theta == 0)) || (phi == 0)) || (r < 0.0)) || (theta < 0.0)) || (theta >= 360.0)) || (phi < 0.0)) || (phi > 180.0))    player:tell("A bearing must be entered as three numbers: a radius greater than or equal to 0; an azimuth angle greater than or equal to 0 and less than 360; and an inclination angle greater than 0 and less than or equal to 180.");  else    this.bearing = {r, theta, phi};    player:tell(this:title(), " is now set with a bearing of ", this:bearing_report(), ".");    this:announce(player:title(), " has set ", this:title(), " with a bearing of ", this:bearing_report(), ".");    this:announce_all("At warp ", this.speed, ", ", this:title(), " will arrive at this bearing in approximately ", this:eta_report(), ".");    this.heading = 0;  endifelseif (verb[1] == "h")  heading = this:find_heading(argstr);  if (heading == $failed_match)    player:tell("Your ship's navigation system does not know where '", argstr, "' is. Perhaps you haven't discovered it yet?");  elseif (heading == $ambiguous_match)    player:tell("'", argstr, "' can refer to more than one heading. Be more specific.");  elseif ((heading.coordinates == this.coordinates) || (this.universe:distance(heading.coordinates, this.coordinates) == 0.0))    player:tell(this:title(), " is already in the same sector as ", heading:oname(), ".");  elseif (heading == this.heading)    player:tell(this:title(), " is already set on a heading toward ", heading:oname(), ".");  else    this.heading = heading;    this.bearing = heading.coordinates;    player:tell(this:title(), " is now set on a heading toward ", heading:oname(), ".");    this:announce(player:title(), " has set ", this:title(), " on a heading toward ", heading:oname(), ".");    this:announce_all("At warp ", this.speed, ", ", this:title(), " will arrive at ", heading:oname(), " in approximately ", this:eta_report(), ".");  endifelse  command = (verb[1] == "b") ? "bearing <radius> <azimuth> <inclination>" | "heading <destination>";  return player:tell("Usage:  ", command);endif"LMB #23230 02/12/2011";.@args #19950:"h*ail" any any any@program #19950:hail"Usage:  hail <ship> or <player> <message>";"  Send a message to another ship in sensor range. When landed, you can use this command to send a message to a player on the same planet as your ship.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be operated. Type 'help #13676' for details.");elseif (length(args) < 2)  return player:tell("Usage: hail <ship> or <player> <message>");endifif (!$object_utils:isa(this.location, #16043))  recipient = $string_utils:explode(args[1])[1];  command = $string_utils:from_list($string_utils:explode(argstr)[2..$], " ");  match = $string_utils:match_player(recipient);  if (match in connected_players())    msg = $string_utils:trim(command);    dobj = match;    player:tell(this:hail_origin_msg(), " \"", msg, "\"");    this:announce(this:ohail_origin_msg(), " \"", msg, "\"");    match:tell(this:hail_receive_msg(), " \"", msg, "\"");  elseif (match == $ambiguous_match)    player:tell("'", argstr, "' can refer to more than one player. Be more specific.");  elseif (match == $failed_match)    player:tell("There is no player called '", argstr, "' at ", this.location:title(), ".");  else    player:tell(match:title(), " is unable to receive hails at this time.");  endifelse  command = argstr;  target = $string_utils:explode(args[1])[1];  range = $list_utils:flatten(this.in_range);  match_list = {};  for r in (range)    name = r:oname() + "*";    if ($string_utils:match_string(command, name) || $string_utils:match_object(target, this.universe))      match_list = setadd(match_list, r);    elseif (match(name, target))      match_list = setadd(match_list, r);    endif    $command_utils:suspend_if_needed(0);  endfor  if (length(match_list) > 1)    player:tell("'", argstr, "' can refer to more than one ship within sensor range. Be more specific.");  elseif (!match_list)    player:tell("There is no ship called '", argstr, "' within sensor range.");  else    ship = match_list[1];    dobj = ship;    msg = $string_utils:match_string(command, name) ? $string_utils:trim($string_utils:from_list($string_utils:match_string(command, ship:oname() + "*"))) | $string_utils:trim(command[length(target) + 1..$]);    player:tell(this:hail_origin_msg(), " \"", msg, "\"");    this:announce(this:ohail_origin_msg(), " \"", msg, "\"");    ship:announce_all(this:hail_receive_msg(), " \"", msg, "\"");  endifendif"LMB #23230 02/12/2011";.@args #19950:"eng*age dis*engage" none none none@program #19950:engage"Usage:  engage | disengage";"  Activates or deactivates the ship's engines. When you engage the ships engines, it will proceed to travel at the current speed, which may be modified en route, until it arrives at the current bearing, which may also be modified en route.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be operated. Type 'help #13676' for details.");elseif (!$object_utils:isa(this.location, #16043))  player:tell(this:title(), " must be launched before its engines can be engaged.");else  if (verb[1] == "e")    if (this.engines)      return player:tell(this:title(), "'s engines are already engaged.");    elseif ((this.bearing == this.coordinates) || (this.universe:distance(this.bearing, this.coordinates) == 0.0))      return player:tell(this:title(), " is already located at its current bearing.");    endif    this.engines = 1;    player:tell(this:engage_origin_msg());    this:announce(this:oengage_origin_msg());    speed = (this.speed > this:speed_limit()) ? this:speed_limit() | this.speed;    heading_msg = (this.heading != 0) ? ("toward " + this.heading:oname()) + " at" | "at";    this:announce_all(this:title(), " now traveling ", heading_msg, " a speed of warp ", speed, " on bearing ", this:bearing_report(), ". ETA: ", this:eta_report(), ".");    if (this:engines() && (this.universe:distance(this.coordinates, this.bearing) == 0.0))      this:announce_lines(this:scan_report());      if (player.location == this)        player:tell(this:engage_arrive_msg());      else        player:tell("*** ", this:title(), "has reached its destination.");      endif      this:announce(this:oengage_arrive_msg());      this.heading = 0;    elseif (this.engines)      this:announce_all(this:title(), " seems to be experiencing a warp drive malfunction. Engines disengaged.");    endif    this.engines = 0;  elseif (verb[1] == "d")    if (!this.engines)      return player:tell(this:title(), "'s engines are not currently engaged.");    endif    this.engines = 0;    this:announce_lines(this:scan_report());    player:tell(this:disengage_msg());    this:announce(this:odisengage_msg());    this:range_update(this.in_range);  endifendif"LMB #23230 02/13/2011";.@args #19950:"engines" this none this@program #19950:enginesif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endif"This function moves the ship using vector math.";"while (this.universe:distance(this.coordinates, this.bearing) > (this.speed))";"  speed = this.speed;";"  midpoint = this:midpoint(this.coordinates, this.bearing);";"  while (d = this.universe:distance(this.coordinates, midpoint) > (speed))";"    midpoint = this:midpoint(this.coordinates, midpoint);";"  endwhile";"  this.coordinates = midpoint;";"endwhile";" <----- OLD CODE ABOVE, NEW CODE BELOW ----->";origin = this.coordinates;count = 0;while (((d = this.universe:distance(this.coordinates, this.bearing)) > 0.0) && this.engines)  speed = (this.speed > this:speed_limit()) ? this:speed_limit() | this.speed;  count = (count > 100) ? 0 | (count + toint(speed));  stars = {};  chars = this:stars();  for s in [1..79]    mod = random(100);    stars = (mod <= length(chars)) ? {@stars, chars[mod]} | {@stars, " "};  endfor  {x1, y1, z1} = this.universe:convert(this.coordinates);  {x2, y2, z2} = this.universe:convert(this.bearing);  {xv, yv, zv} = this:normalize({x1, y1, z1}, {x2, y2, z2});  x = x1 + (speed * xv);  y = y1 + (speed * yv);  z = z1 + (speed * zv);  old_range = this.in_range;  FromPhenomenon = this:universe();  this.coordinates = this.universe:aconvert({x, y, z});  this.coordinates[1] = ceil(this.coordinates[1]);  this.coordinates[2] = tofloat(floatstr(this.coordinates[2], 10));  this.coordinates[3] = tofloat(floatstr(this.coordinates[3], 10));  ToPhenomenon = this:universe(1);  this:sensor_sweep();  if (FromPhenomenon != ToPhenomenon)    this:announce_all(this:title(), " is now leaving ", FromPhenomenon, " and entering ", ToPhenomenon, ".");    if (speed > this:speed_limit())      this:announce_all(ToPhenomenon, " forces ", this:title(), " to drop to warp ", tostr(this:speed_limit()), ".");      speed = this:speed_limit();    elseif ((speed < this:speed_limit()) && (this.speed > speed))      this:announce_all(this:title(), " resumes traveling at warp ", tostr(this:speed_limit()), ".");      speed = this.speed;    endif  endif  this:range_update(old_range);  suspend(1);  if (d <= speed)    suspend(1);    this.coordinates = this.bearing;  endif  if ($command_utils:running_out_of_time())    this:announce_all(this:title(), " is passing through an unstable area of space and needs a moment to stabilize.");    suspend(60);    this:announce_all(this:title(), " has successfully stabilized.");  endif  if (((count == 100) && $set_utils:intersection(this.contents, connected_players())) && this.stars)    this:announce_all($string_utils:center($string_utils:from_list(stars), 79));    count = 0;  endifendwhilereturn (((this.coordinates == origin) || (this.universe:distance(this.coordinates, origin) == 0.0)) && (this.coordinates != this.bearing)) ? 0 | 1;"LMB #23230 02/13/2011";.@args #19950:"commander_msg ocommander_msg launch_start_msg olaunch_start_msg launch_start_outside_msg launch_end_msg olaunch_end_msg board_msg oboard_msg oboard_depart_msg disembark_msg odisembark_msg odisembark_arrive_msg land_start_msg oland_start_msg land_end_msg oland_end_msg land_end_outside_msg scan_msg oscan_msg disengage_msg odisengage_msg engage_origin_msg oengage_origin_msg engage_arrive_msg oengage_arrive_msg hail_origin_msg ohail_origin_msg hail_receive_msg" this none this@program #19950:commander_msg"Verb -> property matching for messages defined on this object not defined on parents.";return $object_utils:has_property(this, verb) ? (msg = this.(verb)) ? $string_utils:pronoun_sub(msg) | "" | "";"LMB #23230 01/09/2011";.@args #19950:"here_huh" this none this@program #19950:here_huh"Look for something to do on an astrophysical anomaly.";if (this.permitted && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;endif{verb, ?target = ""} = args;if ((target && this:valid_space_object()) && $object_utils:isa(this.location, #16043))  range = this.in_range[1];  anomaly = 0;  for o in (range)    if (($object_utils:isa(o, #9602) && match(o:title(), target)) && $object_utils:match_verb(o, verb))      anomaly = o;      verb = $object_utils:match_verb(o, verb)[2];    endif    $command_utils:suspend_if_needed(0);  endfor  if (anomaly && this:valid_space_object(anomaly))    anomaly:(verb)();    return 1;  else    pass(@args);  endifelse  pass(@args);endif"LMB #23230 02/12/2011";.@args #19950:"bearing_report" this none this@program #19950:bearing_reportif ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endif{r, theta, phi} = this.bearing;r = tostr(r);theta = tostr(theta);phi = tostr(phi);return ((((theta + " mark ") + phi) + " at ") + r) + " light years";"LMB #23230 02/10/2011";.@args #19950:"heading_report" this none this@program #19950:heading_reportif ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endifreturn (this.heading == 0) ? 0 | this.heading:oname();"LMB #23230 02/10/2011";.@args #19950:"exp" this none this@program #19950:expif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifitem = args[1];if ((!(item in this.explored)) && (!$object_utils:isa(item, #19950)))  this.explored = {@this.explored, item};endif"LMB #23230 01/23/2011";.@args #19950:"midpoint" this none this@program #19950:midpoint"Returns the spherical coordinates of the midpoint of a line defined by the arguments, which should both also be sets of spherical coordinates.";{a, b} = args;universe = this.universe;{x1, y1, z1} = universe:convert(a);{x2, y2, z2} = universe:convert(b);midpoint = {0.5 * (x1 + x2), 0.5 * (y1 + y2), 0.5 * (z1 + z2)};return this.universe:aconvert(midpoint);"LMB #23230 01/21/2011";.@args #19950:"normalize" this none this@program #19950:normalize"Normalizes a vector given in two sets of Cartesian coordinates. That is, returns the corresponding (x, y, z) values for the unit vector of the given vector, which should be supplied as a start and end point, respectively.";{origin, dest} = args;{x1, y1, z1} = origin;{x2, y2, z2} = dest;ax = x2 - x1;ay = y2 - y1;az = z2 - z1;mag = sqrt(((ax ^ 2) + (ay ^ 2)) + (az ^ 2));`xv = ax / mag ! E_DIV => 0.0';`yv = ay / mag ! E_DIV => 0.0';`zv = az / mag ! E_DIV => 0.0';return {xv, yv, zv};"LMB #23230 01/21/2011";.@args #19950:"who_location_msg" this none this@program #19950:who_location_msgplace = $object_utils:isa(this.location, #16043) ? this:universe() | this.location:title();return ((this:oname() + " [") + place) + "]";"LMB #23230 02/13/2011";.@args #19950:"title" this none this@program #19950:titleif (player.location != this)  return this:oname();else  return (this:oname() == this.name) ? pass(@args) | this:oname();endif"LMB #23230 01/22/2011";.@args #19950:"find_heading" this none this@program #19950:find_headingif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifsearch = args[1];result = $string_utils:match(search, this.explored, "oname");return result;"LMB #23230 01/23/2011";.@args #19950:"loc*ation" none none none@program #19950:location"Usage:  location";"  Reports the current location in coordinates of the ship.";player:tell(this:title(), " is in ", this:universe(), " ", this:location_report());"LMB #23230 02/12/2011";.@args #19950:"eta_report" this none this@program #19950:eta_reportif ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endifeta = `$time_utils:english_time(toint(this.universe:distance(this.coordinates, this.bearing) / this.speed)) ! ANY => tostr(this.universe:distance(this.coordinates, this.bearing)) + " seconds"';return eta;"LMB #23230 02/13/2011";.@args #19950:"scan_report" this none this@program #19950:scan_reportif ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endifnames = {{}, {}, {}, {}};in_range = this.in_range;for range_list in [1..4]  for range_item in (in_range[range_list])    names[range_list] = {@names[range_list], this:name_tag(range_item)};    $command_utils:suspend_if_needed(0);  endforendforrange_msg = {" in this sector.", " nearby.", " in medium sensor range.", " in long sensor range."};scan_msg_list = {};for r in (names)  if (r)    is_are = (length(r) == 1) ? " is" | " are";    scan_msg_list = {@scan_msg_list, ($string_utils:english_list(r) + is_are) + range_msg[r in names]};  endif  $command_utils:suspend_if_needed(0);endforreport = scan_msg_list ? {(this:universe() + " ") + this:location_report(), @this:universe_desc(), @scan_msg_list} | {(this:universe() + " ") + this:location_report(), @this:universe_desc()};return report;"LMB #23230 02/10/2011";.@args #19950:"eta" none none none@program #19950:eta"Usage:  eta";"  Reports the estimated time of arrival of this ship at its current bearing if it travels at its current speed.";if (!$object_utils:isa(this.location, #16043))  player:tell(this:title(), " does not currently have a bearing.");elseif (this.universe:distance(this.coordinates, this.bearing) == 0.0)  player:tell(this:title(), " has already arrived at its current bearing.");else  player:tell("At warp ", this.speed, ", ", this:title(), " will arrive at its current bearing in approximately ", this:eta_report(), ".");endif"LMB #23230 02/05/2011";.@args #19950:"name_tag" this none this@program #19950:name_tagscan = args[1];name = scan:oname();if ($object_utils:isa(scan, #7771) && (!$object_utils:isa(scan, #19950)))  name = "*" + name;elseif ($object_utils:isa(scan, #9602))  name = "@" + name;endifreturn name;"LMB #23230 02/09/2011";.@args #19950:"announce_lines" this none this@program #19950:announce_linesfor dude in ($set_utils:intersection(connected_players(), this:contents()))  dude:tell_lines(@args);  $command_utils:suspend_if_needed(0);endfor"LMB #23230 02/09/2011";.@args #19950:"initialize" this none this@program #19950:initializeif ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endiffork (0)  this.oname = this.name;  this.odescription = {"You see nothing special."};  origin = this.location;  this:moveto(#15218);  if (this.location == origin)    return player:tell("Automatic initialization failed. You must move ", this:title(), " to the San Francisco Shipyards (#15218) yourself in order to initialize it. Check your moveto protection, because if this verb couldn't move it, none of the other ones will, either.");  endif  player:tell(((this:title() + " is now under construction at the San Francisco Shipyards (#15218). Please ") + ((player.location != #15218) ? "proceed to the shipyards " | "type 'build <ship>' ")) + "to complete the initialization procedure.");  this.location:announce_all("The hull of a new ship christened \"", this:title(), "\" appears in the shipyards.");endfork"LMB #23230 02/12/2011";.@args #19950:"@stars" any any any@program #19950:@stars"Usage:  @stars <on> or <off> | @stars";"  Turns the decorative stars displayed while the ship is engaged on or off. Without 'on' or 'off' as an argument, reports the current status of star reporting.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be modified. Type 'help #13676' for details.");endifif (!args)  player:tell(("Stars are " + (this.stars ? "currently " | "not currently ")) + "being displayed for ", this:title(), ".");elseif (argstr == "on")  if (this.stars != 0)    player:tell("Stars are currently being displayed for ", this:title(), ".");  else    this.stars = 1;    player:tell("Stars will now be displayed for ", this:title(), ".");    this:announce(player:title(), " has turned on the stars display for ", this:title(), ".");  endifelseif (argstr == "off")  if (this.stars == 0)    player:tell("Stars are not currently being displayed for ", this:title(), ".");  else    this.stars = 0;    player:tell("Stars will no longer be displayed for ", this:title(), ".");    this:announce(player:title(), " has turned off the stars display for ", this:title(), ".");  endifelse  player:tell("Usage:  @stars <on> or <off> | @stars");endif"LMB #23230 02/13/2011";.@args #19950:"stars" this none this@program #19950:starsph = this:universe();if (ph == this.universe:title())  stars = this.universe.stars;else  index = ph in this.universe.pnames;  stars = this.universe.pstars[index] ? this.universe.pstars[index] | this.universe.stars;endifreturn stars;"LMB #23230 02/13/2011";.@args #19950:"@sensors" any any any@program #19950:@sensors"Usage:  @sensors <on> or <off> | @sensors";"  Turns the sensor system on or off. If the sensor system is off, the ship will continue to track objects in sensor range but will not report on their status. Without 'on' or 'off' as an argument, reports the current status of the sensor system.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be modified. Type 'help #13676' for details.");endifif (!args)  player:tell((this:title() + "'s sensor system is currently ") + (this.sensors ? "on." | "off."));elseif (argstr == "on")  if (this.sensors != 0)    player:tell(this:title(), "'s sensor systems are already on.");  else    this.sensors = 1;    player:tell(this:title(), "'s sensor systems are now on.");    this:announce(player:title(), " has activated ", this:title(), "'s sensor systems.");  endifelseif (argstr == "off")  if (this.sensors == 0)    player:tell(this:title(), "'s sensor systems are already off.");  else    this.sensors = 0;    player:tell(this:title(), "'s sensor systems are now off.");    this:announce(player:title(), " has deactivated ", this:title(), "'s sensor systems.");  endifelse  player:tell("Usage:  @sensors <on> or <off> | @sensors");endif"LMB #23230 02/13/2011";."***finished***@dump gu@chmod #16043."permitted" ;#16043.("permitted") = {}@chmod #16043."noperms_msg" r;#16043.("noperms_msg") = ""@chmod #16043."pnames" r;#16043.("pnames") = {}@chmod #16043."pdescs" r;#16043.("pdescs") = {}@chmod #16043."pvalues" ;#16043.("pvalues") = 0@chmod #16043."p_shapes" r;#16043.("p_shapes") = {"sphere", "ellipsoid", "torus", "elliptical torus"}@chmod #16043."pdetails" ;#16043.("pdetails") = {};#16043.("help_msg") = "The universe is the place where everything happens--all the action and excitement. It's where all the people are. Basically, anything that could happen happens here. For additional help, see the documentation on the individual verbs. Universes are for advanced users.";#16043.("stars") = {".", "@", "*", "+", "o", ".", "x", "*", "+", ":"}@chmod #16043."pstars" ;#16043.("pstars") = {};#16043.("entrances") = {};#16043.("exits") = {};#16043.("key") = 0;#16043.("aliases") = {"[MOOSpace] Generic Universe", "gu"};#16043.("description") = "A universe in MOOSpace is basically a container for all the space objects within it--a room of rooms that you have to imagine is infinite in extent. According to Richard Bartle, this is the sort of act of fancy that makes text-based virtual worlds superior to graphics-based ones. Universes also have regional features, called phenomena, that can affect starship navigation in various ways. Generally speaking, you won't need to create children of this object (or more than one, at least) unless you want to have your own dimension for ships, etc. to explore. Theoretically, you could create a whole series of universes and string them together into a multiverse, but it would take someone quite a long time to explore it!";#16043.("object_size") = {38427, 1297703991}"#16043.("original_owner") => E_PERM (Permission denied)"#16043.("days_left") => E_PERM (Permission denied);#16043.("creation_date") = 969427835"#16043.("queued_task_limit") => E_PERM (Permission denied)@args #16043:"@add-p*henomenon @addp*henomenon @remove-p*henomenon @removep*henomenon @rm-p*henomenon @rmp*henomenon" any none none@program #16043:@add-phenomenon"Usage:  @add-phenomenon <name> | @remove-phenomenon <name>";"  Adds or removes a cosmic phenomenon to this universe. A phenomenon is an area of space defined according to its shape. The default shapes are sphere, ellipsoid, torus, and elliptical torus. Additional shapes may be defined. A ship within the boundaries of a phenomenon will see a different name and description when it scans its present position in space. Use phenomena for such things as galaxies, star systems, nebulae, or whatever other weird things you can devise. Since phenomena can overlap, you can rearrange them or even add speed limits for ships traveling through them using the @set-phenomenon command.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifif (!dobjstr)  return player:tell("Usage: @", (verb[2] == "r") ? "remove-phenomenon" | "add-phenomenon", " <name>");endifname = dobjstr;if (verb[2] == "r")  if (this:remove_phenomenon(name))    player:tell(name, " has been removed from ", this:title(), ".");  else    player:tell("There is no phenomena called ", name, " defined on ", this:title(), ".");  endifelseif (verb[2] == "a")  if ((name == this:title()) || (name == this.name))    return player:tell("You must choose a phenomenon name that is different from the name of the universe.");  endif  if (results = this:match_phenomenon(name))    index = results[1];    question = (length(results) == 1) ? ((("There is a phenomenon called " + this.pnames[index]) + " already defined on ") + this:title()) + ". Do you want to write a new description for it? Answer 'yes' to replace the description. Otherwise a new phenomenon will be created." | (((((("There are " + length(results)) + " phenomena with the name ") + this.pnames[index]) + " already defined on ") + this:title()) + ". Do you want to write a new description for them? Answer 'yes' to replace the descriptions. Otherwise, a new phenomenon will be created.");    if ($string_utils:find_prefix($command_utils:read(player:tell(question)), {"yes", "1"}))      desc = $command_utils:read_lines(player:tell("Enter a new description for ", this.pnames[index], ":"));      for p in (results)        this.pdescs[p] = desc;        $command_utils:suspend_if_needed(0);      endfor      return player:tell("Description changed.");    endif  endif  player:tell("Enter a description for ", name, ":");  desc = $command_utils:read_lines();  shape = 0;  "If you want to define additional shapes, you should: 1. append the name of the shape as a string to this.p_shapes, 2. create a verb with the same name, replacing any spaces between words with underscores so the verb can be called internally, 3. program the verb collect the necessary values from the player to create the shape and store them in this.pvalues (see the original shape verbs for guidance), 4. create a verb called [shape]_contains where [shape] is the same name used above, and 5. program that verb to take as arguments a list of spherical coordinates in {radius, azimuth, inclination} form and a list of values from this.pvalues and return true if the coordinates are inside the specified phenomenon and false otherwise. This is easier than it sounds.";  while ((shape < 1) || (shape > length(this.p_shapes)))    player:tell("What shape do you want ", name, " to have? Enter a number:");    player:tell();    for sh in [1..length(this.p_shapes)]      player:tell(sh, ". ", this.p_shapes[sh]);    endfor    shape = toint($command_utils:read());  endwhile  shape_name = this.p_shapes[shape];  if ($object_utils:has_callable_verb(this, shape_name = $string_utils:substitute(shape_name, {{" ", "_"}})))    verb = shape_name;    this:(verb)(name, desc);  else    player:tell(this:title(), " is not capable of creating a ", shape_name, ". Command aborted.");    return;  endif  player:tell("A phenomenon called ", name, " shaped like ", ($string_utils:a_or_an(shape_name) + " ") + $string_utils:substitute(shape_name, {{"_", " "}}), " has been added to ", this:title(), ".");endif"LMB #23230 02/13/2011";.@args #16043:"@pheno*mena" none none none@program #16043:@phenomena"Usage:  @phenomena";"  Lists the phenomena defined on this universe and their details.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifif (this.pnames == {})  player:tell("There are no phenomena defined on ", this:title(), ".");else  player:tell("Phenomena defined on ", this:title(), " (bottom to top):");  index = 0;  for p in (this.pnames)    index = index + 1;    coordinates = ((((("(" + tostr(this.pvalues[index][1][1])) + ", ") + tostr(this.pvalues[index][1][2])) + ", ") + tostr(this.pvalues[index][1][3]))  + ")";    shape = this.p_shapes[this.pvalues[index][3]];    limit_text = ((limit = this.pvalues[index][4]) > 0) ? "a speed limit of warp " + tostr(limit) | "no speed limit";    player:tell(index, ". ", p, " with origin point at coordinates ", coordinates, " shaped like ", $string_utils:a_or_an(shape), " ", shape, " and with ", limit_text, ".");    if (data_string = this:phenomenon(index))      player:tell("   " + data_string);    endif    if ($list_utils:flatten(this.pdetails[index]))      details = {};      for pd in (this.pdetails[index][1])        details = {@details, pd};        $command_utils:suspend_if_needed(0);      endfor      player:tell("   Details defined on ", p, ": ", $string_utils:english_list(details), ".");    endif    $command_utils:suspend_if_needed(0);  endforendif"LMB #23230 01/19/2011";.@args #16043:"distance" this none this@program #16043:distance"Converts two sets of spherical coordinates into Cartesian coordinates and calculates the distance between them. You can hack this procedure for your universe if you want to define your own physics.";{x1, y1, z1} = this:convert(args[1]);{x2, y2, z2} = this:convert(args[2]);distance = sqrt((((x2 - x1) ^ 2.0) + ((y2 - y1) ^ 2.0)) + ((z2 - z1) ^ 2.0));"Because of the limitations of floating point calculations, it is necessary to reduce the precision of the extremely long decimals that will sometimes result from this procedure.";return tofloat(floatstr(distance, 10));"LMB #23230 01/08/2011";.@args #16043:"convert aconvert" this none this@program #16043:convert"The convert() function converts spherical into Cartesian coordinates, and aconvert() is vice versa. The positive x-axis in Cartesian is identical to the projection of 0 degrees of azimuth (theta) in the spherical system, and the positive y-axis is identical to the projection of 0 degrees of inclination (phi).";if (verb == "convert")  {r, theta, phi} = args[1];  if (((!(r >= 0.0)) || (!((theta >= 0.0) && (theta < 360.0)))) || (!((phi >= 0.0) && (phi <= 180.0))))    return E_INVARG;  else    theta = this:radians(theta);    phi = this:radians(phi);    x = (r * cos(theta)) * sin(phi);    y = (r * sin(theta)) * sin(phi);    z = r * cos(phi);    return {x, y, z};  endifelseif (verb == "aconvert")  {x, y, z} = args[1];  r = sqrt(((x ^ 2.0) + (y ^ 2.0)) + (z ^ 2.0));  theta = atan(y, x);  phi = `acos(z / r) ! E_DIV => 0';  "atan() returns a value between -pi and pi, but MOOSpace uses 360 degrees for azimuth, so any values less than zero (that is, in the range 0 to -180 degrees) are simply subtracted from 360 after conversion from radians to degrees.";  theta = (theta < 0.0) ? 360.0 - abs(this:degrees(theta)) | this:degrees(theta);  phi = this:degrees(phi);  return {r, theta, phi};endif"LMB #23230 01/23/2011";.@args #16043:"degrees" this none this@program #16043:degrees"Converts radians into degrees.";return tofloat(args[1]) * 57.2957795130823;"LMB #23230 01/07/2011";.@args #16043:"radians" this none this@program #16043:radians"Converts degrees into radians.";return tofloat(args[1]) * 0.0174532925199433;"LMB #23230 01/07/2011";.@args #16043:"perm_check" this none this@program #16043:perm_check"Takes a single object as an argument, usually the value of caller if passed from the command line and caller_perms() otherwise. Returns true if the object (typically a player) is this, this.owner, listed in this.permitted, or a wizard. Returns false otherwise or if the argument list is the wrong length. This is a permissions check meant to prevent verb spoofing. Every command verb defined on MOOSpace objects should use it. Since it's so important, perm_check() does considerable maintenance on this.permitted whenever it's called.";{?TestCase = 0, @rest} = args;if (!$perm_utils:controls(caller_perms(), this))  return E_PERM;elseif ((typeof(TestCase) != OBJ) || rest)  return E_ARGS;elseif (!$object_utils:has_property(this, "permitted"))  player:tell("** ERROR: The .permitted property on ", this.name, " is either missing or broken.");  return $perm_utils:controls(caller_perms(), this);elseif (typeof(this.permitted) != LIST)  this.permitted = {};endiftrusted_list = {#23230, this};permitted_list = this.permitted;"The for loop below makes sure the objects in this.permitted are valid (i.e. they exist and haven't been recycled) and cleans it up if necessary.";for trusted_object in (permitted_list = $list_utils:remove_duplicates($list_utils:flatten(permitted_list)))  $command_utils:suspend_if_needed(0);  if ((typeof(trusted_object) == OBJ) && $recycler:valid(trusted_object))    trusted_list = {@trusted_list, trusted_object};  else    permitted_list = setremove(permitted_list, trusted_object);  endifendforthis.permitted = permitted_list;return (TestCase in trusted_list) || $perm_utils:controls(TestCase, this);"LMB #23230 02/10/2011";.@args #16043:"@permit @trust" any any any@program #16043:@permit"Usage:  @permit <any player> | @permit -<any player>";"  Commissions a player other than the owner to operate or modify this space object. Only the owner, however, can use this command. Use a minus sign '-' in front of the player's name to decommission that player";if (!$perm_utils:controls(caller, this))  player:tell(this:noperms_msg());  return E_PERM;elseif (!args)  permitted_list = $list_utils:remove_duplicates({this.owner, @this.permitted});  player:tell($string_utils:title_list(permitted_list), (permitted_list == {this.owner}) ? " is " | " are ", $string_utils:pronoun_sub("permitted to operate and modify %t."));elseif (dobjstr[1] == "-")  match = $string_utils:match(dobjstr[2..$], {this.owner, @this.permitted}, "aliases");  if ((match == this.owner) && (this.permitted == {}))    player:tell("You cannot decommission yourself!");  elseif (match in this.permitted)    this.permitted = setremove(this.permitted, match);    player:tell(match:title(), $string_utils:pronoun_sub(" is no longer commissioned to operate or modify %t."));  elseif (match == $ambiguous_match)    player:tell(dobjstr, " can refer to more than one player. Please be more specific.");  else    player:tell(dobjstr, $string_utils:pronoun_sub(" is not the name of any player currently commissioned to operate and modify %t."));  endifelse  match = $string_utils:match_player(tostr(dobjstr));  if (match == $failed_match)    player:tell("No player called ", dobjstr, " can be found. Try using the player's object number instead.");  elseif (match == $ambiguous_match)    player:tell(dobjstr, " can refer to more than one player. Please be more specific.");  elseif (match in this.permitted)    player:tell(match:title(), $string_utils:pronoun_sub(" is already permitted to operate and modify %t."));  else    this.permitted = {@this.permitted, match};    player:tell(match:title(), $string_utils:pronoun_sub(" is now commissioned to operate and modify %t."));  endifendif"LMB #23230 01/23/2011";.@args #16043:"@set-p*henomenon @setp*henomenon" any any any@program #16043:@set-phenomenon"Usage:  @set-phenomenon <phenomenon> move up/down/top/bottom | @set-phenomenon <phenomenon> to <speed>";"  Rearranges the match order of a phenomenon defined on this universe or changes the maximum speed of ships passing through it. The first usage of the verb is useful if you want, e.g., a default phenomenon of a significant size, like a galaxy, to sit underneath more specific and localized phenomena like nebulae and such which take precedence. The second usage of the verb changes the speed limit of the phenomenon, which might make sense of the phenomenon is meant to represent an area of strong gravity or material density. Changing the speed limit will also affect the maximum sensor range of ships looking out of or into the phenomenon by an equivalent factor.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endif{?ph = "", @extra_words, ?do = "", ?parameter = ""} = args;if (extra_words)  ph = (ph + " ") + $string_utils:from_list(extra_words, " ");endifif (ph && (!(p_index = this:match_phenomenon(ph))))  return player:tell("There is no phenomenon called ", ph, " defined on ", this:title(), ".");elseif (parameter && (do == "move"))  if (length(this.pnames) == 1)    return player:tell("There is only one phenomenon defined on ", this:title(), ".");  endif  for p in (p_index)    pname = this.pnames[p];    pdesc = this.pdescs[p];    pvalue = this.pvalues[p];    pdetails = this.pdetails[p];    r = 0;    if ((parameter[1] == "u") && (p < length(this.pnames)))      r = p + 1;      player:tell(pname, " moved above ", this.pnames[r], ".");    elseif ((parameter[1] == "d") && (p > 1))      r = p - 1;      player:tell(pname, " moved below ", this.pnames[r], ".");    elseif ((parameter[1] == "t") && (p < length(this.pnames)))      r = length(this.pnames);      player:tell(pname, " moved to the top of the list, above ", this.pnames[r], ".");    elseif ((parameter[1] == "b") && (p > 1))      r = 1;      player:tell(pname, " moved to the bottom of the list, below ", this.pnames[r], ".");    else      player:tell(this.pnames[p], " unchanged.");    endif    if (r)      rname = this.pnames[r];      rdesc = this.pdescs[r];      rvalue = this.pvalues[r];      rdetails = this.pdetails[r];      this.pnames[r] = pname;      this.pnames[p] = rname;      this.pdescs[r] = pdesc;      this.pdescs[p] = rdesc;      this.pvalues[r] = pvalue;      this.pvalues[p] = rvalue;      this.pdetails[r] = pdetails;      this.pdetails[p] = rdetails;      "There must be an easier way of doing this. I suppose I could have written a swapping function, but it's such a low-intensity operation.";    endif    $command_utils:suspend_if_needed(0);  endforelseif ((parameter && (do == "to")) && $string_utils:is_numeric($string_utils:explode(parameter, ".")[1]))  speed = toint(parameter);  for p in (p_index)    if (this.pvalues[p][4] == speed)      return player:tell(this.pnames[p], " is already set to a speed limit of ", speed, ".");    elseif ((speed < 0) || (speed > 10))      return player:tell(speed, " is an invalid speed limit. Enter 0 for no speed limit or a speed of 1-10.");    endif    this.pvalues[p][4] = speed;    player:tell("The speed limit of ", this.pnames[p], " is now warp ", speed, ".");    if (speed == 10)      player:tell("Note: if the speed limit is set to 10, ships will not be able to enter the area of space defined by ", this.pnames[p], ".");    endif    $command_utils:suspend_if_needed(0);  endforelse  return player:tell("Usage:  @set-phenomenon <phenomenon> move up/down/top/bottom | @set-phenomenon <phenomenon> to <speed>");endif"LMB #23230 02/13/2011";.@args #16043:"noperms_msg" this none this@chmod #16043:noperms_msg rx@program #16043:noperms_msg"Copied from Improved Generic-All-In-One Room (#7424):noperms_msg by Rat (#4385) Sat Jan  8 16:58:31 2011 PST";return this.(verb) ? this.(verb) | E_PERM;.@args #16043:"@clear-p*henomena @clearp*henomena" none none none@program #16043:@clear-phenomena"Usage:  @clear-phenomena";"  Clears all the phenomena and their details from this universe.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifif (!this.pnames)  return player:tell("There are no phenomena defined on ", this:title(), ".");endifanswer = $command_utils:read(player:tell("Are you sure you want to clear all the phenomena from ", this:title(), "?"));if ($string_utils:find_prefix(answer, {"yes", "1"}))  names = length(this.pnames);  for index in [1..names]    player:tell(this.pnames[index], " cleared.");    $command_utils:suspend_if_needed(0);  endfor  this.pnames = {};  this.pdescs = {};  this.pvalues = {};  this.pdetails = {};  player:tell("All phenomena cleared from ", this:title(), ".");else  player:tell("Clear canceled.");endif"LMB #23230 01/19/2011";.@args #16043:"remove_phenomenon" this none this@program #16043:remove_phenomenonif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifname = args[1];if (index = this:match_phenomenon(name))  p = index[$];  this.pnames = listdelete(this.pnames, p);  this.pdescs = listdelete(this.pdescs, p);  this.pvalues = listdelete(this.pvalues, p);  this.pdetails = listdelete(this.pdetails, p);  return 1;else  return 0;endif"LMB #23230 01/17/2011";.@args #16043:"moveto" this none this@program #16043:movetoif (!this:perm_check(caller))  player:tell("Gravity discourages you from even attempting that.");  return;endifreturn pass(@args);"LMB #23230 01/09/2011";.@args #16043:"sphere ellipsoid torus elliptical_torus" this none this@program #16043:sphere"This verb assumes that the first four values of this.p_shapes are sphere, ellipsoid, torus, and elliptical_torus. If you change them, this verb may not function correctly.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endif{name, desc} = args;origin = {-1.0, -1.0, -1.0};data = {};while (origin[1] < 0.0)  `origin[1] = tofloat($command_utils:read(player:tell("Enter a radius for the origin point of ", name, " that is greater than or equal to zero. This is the distance (e.g. in light years) from the origin (e.g. Earth) to the center point of your phenomenon."))) ! E_INVARG => -1';endwhilewhile ((origin[2] < 0.0) || (origin[2] >= 360.0))  `origin[2] = tofloat($command_utils:read(player:tell("Enter an azimuth for the origin point of ", name, " that is greater than or equal to 0 and less than 360. This is the angle, in degrees, between the axis pointing from, e.g., Earth toward, e.g., the center of the galaxy (or universe) and the axis along which your phenomenon lies. The angle increases in a clockwise direction."))) ! E_INVARG => -1';endwhilewhile ((origin[3] < 0.0) || (origin[3] > 180.0))  `origin[3] = tofloat($command_utils:read(player:tell("Enter an inclination for the origin point of ", name, " that is greater than or equal to 0 and less than or equal to 180. This is the angle, in degrees, between e.g. galactic polar north and the axis along which your phenomenon lies. 0 degrees is directly above the galactic plane, 90 degrees is level with the galactic plane, and 180 degrees is directly below this plane."))) ! E_INVARG => -1';endwhileif (verb == "sphere")  radius = 0.0;  while (radius < 0.0)    `radius = tofloat($command_utils:read(player:tell("Enter the radius of the spherical phenomenon called ", name, ". This is the distance from the origin point to the edge of the phenomenon in all directions."))) ! E_INVARG => -1';  endwhile  data = {radius};elseif (verb == "ellipsoid")  semiaxes = {0.0, 0.0, 0.0};  while (semiaxes[1] <= 0.0)    `semiaxes[1] = tofloat($command_utils:read(player:tell("Enter the length of the first semiaxis of ", name, ". This semiaxis is aligned with the galactic axis that lies between the origin point, e.g. Earth, and the center of the galaxy."))) ! E_INVARG => -1';  endwhile  while (semiaxes[2] <= 0.0)    `semiaxes[2] = tofloat($command_utils:read(player:tell("Enter the length of the second semiaxis of ", name, ". This semiaxis is aligned with the galactic axis that is perpendicular to the first semiaxis and level with the galactic plane."))) ! E_INVARG => -1';  endwhile  while (semiaxes[3] <= 0.0)    `semiaxes[3] = tofloat($command_utils:read(player:tell("Enter the length of the third semiaxis of ", name, ". This semiaxis is aligned with the vertical axis that connects the antipodes of the galactic coordinate system. It is perpendicular to the first and second semiaxes and also with the galactic plane."))) ! E_INVARG => -1';  endwhile  data = semiaxes;elseif (verb == "torus")  torus_radius = 0.0;  tube_radius = 0.0;  while (torus_radius <= 0.0)    `torus_radius = tofloat($command_utils:read(player:tell("Enter the radius of the torus-shaped phenomenon called ", name, ". This is the distance from the origin point of the torus to the center of the torus tube."))) ! E_INVARG => -1';  endwhile  while (tube_radius <= 0.0)    `tube_radius = tofloat($command_utils:read(player:tell("Enter the radius of the torus tube for ", name, ". This is the distance from the center of the tube to its outer edge."))) ! E_INVARG => -1';  endwhile  data = {torus_radius, tube_radius};elseif (verb == "elliptical_torus")  semiaxes = {0.0, 0.0};  radius = 0.0;  while (semiaxes[1] <= 0.0)    `semiaxes[1] = tofloat($command_utils:read(player:tell("Enter the length of the first semiaxis of ", name, ". This semiaxis is aligned with the galactic axis that lies between the origin point, e.g. Earth, and the center of the galaxy."))) ! E_INVARG => -1';  endwhile  while (semiaxes[2] <= 0.0)    `semiaxes[2] = tofloat($command_utils:read(player:tell("Enter the length of the second semiaxis of ", name, ". This semiaxis is aligned with the galactic axis that is perpendicular to the first semiaxis and level with the galactic plane."))) ! E_INVARG => -1';  endwhile  while (radius <= 0.0)    `radius = tofloat($command_utils:read(player:tell("Enter the radius of the elliptical torus-shaped phenomenon called ", name, ". This is the distance from the origin point of the elliptical torus to the center of the torus tube."))) ! E_INVARG => -1';  endwhile  data = {@semiaxes, radius};else  player:tell("Error. No phenomenon created. There is a problem with the sphere ellipsoid torus elliptical_torus verb. One or more parts may be missing.");  return;endifshape_index = $string_utils:substitute(verb, {{"_", " "}}) in this.p_shapes;this.pnames = {@this.pnames, name};this.pdescs = {@this.pdescs, desc};this.pvalues = {@this.pvalues, {origin, data, shape_index, 0}};this.pdetails = {@this.pdetails, {}};this.pstars = {@this.pstars, {}};"Information stored in pvalues = {{radius, azimuth, inclination}, {data specific to each shape such as radius or semiaxis lengths}, index of the shape of the phenomenon in this.p_shapes, speed limit of ships passing through the phenomenon, 0 if none and by default}";"LMB #23230 02/13/2011";.@args #16043:"@add-phenomenon-detail @addphenomenondetail @add-ph-detail @addphdetail @remove-phenomenon-detail @removephenomenondetail @remove-ph-detail @removephdetail @rm-ph-detail @rmphdetail" any any any@program #16043:@add-phenomenon-detail"Usage:  @add-phenomenon-detail <detail> to <phenomenon> | @remove-phenomenon-detail <detail> from <phenomenon>";"  Adds or removes a detail from a cosmic phenomenon defined on this universe. These act like room details when scanned by a ship and add descriptive variety to a phenomenon.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifif (((!dobjstr) || (!(prepstr && iobjstr))) || (!(args[2] in {"out of", "from inside", "from", "at", "to"})))  return player:tell("Usage: @", (verb[2] == "r") ? "remove-phenomenon-detail <detail> from" | "add-phenomenon-detail <detail> to", " <phenomenon>");endifdetail = args[1];ph = args[3];if (verb[2] == "r")  if (!(ph_match = this:match_phenomenon(ph)))    return player:tell("There is no phenomenon called ", ph, " defined on ", this:title(), ".");  endif  results = this:remove_phenomenon_detail(detail, ph);  detail_names = results[1];  ph_names = results[2];  if (!detail_names)    return player:tell("There is no detail called ", detail, " defined on ", this.pnames[ph_match[1]], ".");  else    for removed in [1..length(ph_names)]      player:tell(detail_names[removed], " has been removed from ", ph_names[removed], ".");      $command_utils:suspend_if_needed(0);    endfor    return;  endifelseif (verb[2] == "a")  results = this:match_phenomenon(ph);  detail_results = this:match_phenomenon_detail(detail, results);  if (!results)    return player:tell("There is no phenomenon called ", ph, " defined on ", this:title(), ".");  elseif (detail_results[2])    ph_name = this.pnames[results[1]];    detail_name = this.pdetails[detail_results[1][1]][1][detail_results[2][1]];    if ($string_utils:find_prefix($command_utils:read(player:tell("One or more details called ", detail_name, " are already defined on the phenomenon or phenomena called ", ph_name, ". Do you want to write a new description for it/them?")), {"yes", "1"}))      desc = $command_utils:read_lines(player:tell("Enter a new description for ", detail_name, ":"));      for p in (detail_results[1])        for d in (details_results[2])          this.pdetails[p][2][d] = desc;        endfor      endfor      player:tell("Detail description changed.");    else      return player:tell("Command aborted.");    endif  else    desc = $command_utils:read_lines(player:tell("Enter a description for ", detail, ":"));    for p in (results)      if (this.pdetails[p] == {})        this.pdetails[p] = {{}, {}};      endif      this.pdetails[p][1] = {@this.pdetails[p][1], detail};      this.pdetails[p][2] = {@this.pdetails[p][2], desc};      player:tell("New detail added.");      $command_utils:suspend_if_needed(0);    endfor    "This process is not very efficient but isn't meant to be used in inefficient ways too often.";    "That is, if you have multiple phenomena with the same name, because you want to take advantage of overlapping to create complex shapes.";  endifendif"LMB #23230 01/17/2011";.@args #16043:"@add-shape @addshape @remove-shape @removeshape @rmshape" any none none@program #16043:@add-shape"Usage:  @add-shape <shape name> | @remove-shape <shape name>";"  Add or remove the name of a phenomenon shape to the shape name list of this universe.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifif (!args)  return player:tell("Usage:  @", (verb[2] == "r") ? "remove-shape" | "add-shape", " <shape name>");endifshape = argstr;if (verb[2] == "r")  if (index = $string_utils:find_prefix(shape, this.p_shapes))    if (index < 5)      player:tell(this.p_shapes[index], " cannot be removed.");    else      player:tell(this.p_shapes[index], " removed.");      player:tell("If you created any phenomena with the shape ", this.p_shapes[index], ", you must remove them manually. Otherwise, they will be treated as spheres.");      this.p_shapes = listdelete(this.p_shapes, index);    endif  else    player:tell("No shape called ", shape, " has been defined on ", this:title(), ".");  endifelseif (verb[2] == "a")  this.p_shapes = {@this.p_shapes, shape};  player:tell(shape, " has been added to the phenomena shapes list for ", this:title(), ".");endif"LMB #23230 01/15/2011";.@args #16043:"sphere_contains ellipsoid_contains torus_contains elliptical_torus_contains" this none this@program #16043:sphere_contains"Determines whether or not a given point is within the boundaries of a phenomenon with relevant data from this.pvalues.";{center, data, point} = args;result = 0;if (verb == "sphere_contains")  {xO, yO, zO} = this:convert(center);  {x, y, z} = this:convert(point);  {r} = data;  result = (((((x - xO) ^ 2.0) + ((y - yO) ^ 2.0)) + ((z - zO) ^ 2.0)) <= (r ^ 2.0)) ? 1 | 0;elseif (verb == "ellipsoid_contains")  {xO, yO, zO} = this:convert(center);  {a, b, c} = data;  {x, y, z} = this:convert(point);  op1 = ((x - xO) ^ 2.0) / (a ^ 2.0);  op2 = ((y - yO) ^ 2.0) / (b ^ 2.0);  op3 = ((z - zO) ^ 2.0) / (c ^ 2.0);  result = (((op1 + op2) + op3) <= 1.0) ? 1 | 0;elseif (verb == "torus_contains")  {xO, yO, zO} = this:convert(center);  {x, y, z} = this:convert(point);  {c, r} = data;  result = (((c - (sqrt(((x - xO) ^ 2.0) + ((y - yO) ^ 2.0)) ^ 2.0)) + ((z - zO) ^ 2.0)) <= (r ^ 2)) ? 1 | 0;elseif (verb == "elliptical_torus_contains")  {xO, yO, zO} = this:convert(center);  {x, y, z} = this:convert(point);  {a, b, c} = data;  op1 = (((((a ^ 2.0) * ((((z - zO) ^ 2.0) / (b ^ 2.0)) - 1.0)) - (c ^ 2.0)) + ((x - xO) ^ 2.0)) + ((y - yO) ^ 2.0)) ^ 2.0;  op2 = ((4.0 * (a ^ 2.0)) * (c ^ 2.0)) * (1.0 - (((z - zO) ^ 2.0) / (b ^ 2.0)));  return (op1 <= op2) ? 1 | 0;endifreturn result;"LMB #23230 02/13/2011";.@args #16043:"@shapes" none none none@program #16043:@shapes"Usage:  @shapes";"  Lists the available phenomena shapes defined on this universe.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifplayer:tell("Phenomena shapes defined on ", this:title(), ":");for shape in (this.p_shapes)  player:tell(shape);  $command_utils:suspend_if_needed(0);endfor"LMB #23230 01/15/2011";.@args #16043:"remove_phenomenon_detail" this none this@program #16043:remove_phenomenon_detail"Takes as arguments the name of a detail and the name of a phenomenon. Deletes all details that match the given detail name from all phenomena that match the given phenomenon name. Returns two lists, the names of the details deleted and the names of the phenomena deleted. This is a redundant step but designed to remind the player that redundant details are being deleted.";detail = args[1];ph = args[2];ph_list = this:match_phenomenon(ph);detail_list = this:match_phenomenon_detail(detail, ph_list);ph_names = {};detail_names = {};index = 0;for p in (detail_list[1])  index = index + 1;  d = detail_list[2][index];  ph_names = {@ph_names, this.pnames[p]};  detail_names = {@detail_names, this.pdetails[p][1][d]};  this.pdetails[p][1] = listdelete(this.pdetails[p][1], d);  this.pdetails[p][2] = listdelete(this.pdetails[p][2], d);  if (!$list_utils:flatten(this.pdetails[p]))    this.pdetails[p] = $list_utils:flatten(this.pdetails[p]);  endif  $command_utils:suspend_if_needed(0);endforreturn {detail_names, ph_names};"LMB #23230 01/17/2011";.@args #16043:"match_phenomenon" this none this@program #16043:match_phenomenon"Takes as an argument the name of a phenomenon and returns as a list the indexes of all the phenomena that match it which are stored in this.pnames.";ph = args[1];results = {};index = 0;for p in (this.pnames)  index = index + 1;  if (match(p, ph))    results = {@results, index};  endif  $command_utils:suspend_if_needed(0);endforreturn results;"LMB #23230 01/17/2011";.@args #16043:"match_phenomenon_detail" this none this@program #16043:match_phenomenon_detail"Takes as arguments the name of a detail to match and a list of indexes to phenomena stored in this.pnames and usually returned from this:match_phenomenon(). Returns a list of two lists. Each item in the first list is the the index number of a phenomenon that corresponds to the same element in the second list, which is the index number of a detail defined for that phenomenon. E.g., if this function returns {{1, 2}, {1, 1}}, then detail 1 on phenomena 1 (this.pnames[1]) and detail 1 on phenomena 2 match the given detail name. This could have been done in a more straightforward way. Maybe in the next version.";detail = args[1];ph_list = args[2];ph = {};details = {};index = 0;for p_index in (ph_list)  index = 0;  if (this.pdetails[p_index])    for d in (this.pdetails[p_index][1])      index = index + 1;      if (match(d, detail))        ph = {@ph, p_index};        details = {@details, index};      endif      $command_utils:suspend_if_needed(0);    endfor  endif  $command_utils:suspend_if_needed(0);endforreturn {ph, details};"LMB #23230 01/17/2011";.@args #16043:"@clear-phenomena-details @clearphenomenadetails @clear-ph-details @clearphdetails" any any any@program #16043:@clear-phenomena-details"Usage:  @clear-phenomena-details <phenomenon> | @clear-phenomena-details";"  With a phenomenon as an argument, clears all the details from that phenomenon. If no argument is given, all the details for all phenomena are cleared from this universe.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifif (!this.pnames)  return player:tell("There are no phenomena defined on ", this:title(), ".");elseif ($list_utils:flatten(this.pdetails) == {})  return player:tell("There are no details for any phenomena defined on ", this:title(), ".");endifif (!args)  answer = $command_utils:read(player:tell("Are you sure you want to clear all the details from all the phenomena defined on ", this:title(), "?"));  if ($string_utils:find_prefix(answer, {"yes", "1"}))    for p in [1..length(this.pnames)]      if (this.pdetails[p])        for d in [1..length(this.pdetails[p][1])]          player:tell(this.pdetails[p][1][d], " cleared from ", this.pnames[p], ".");          $command_utils:suspend_if_needed(0);        endfor        this.pdetails[p] = {};        player:tell("All details cleared from ", this.pnames[p], ".");      endif      $command_utils:suspend_if_needed(0);    endfor  else    return player:tell("Clear canceled.");  endifelseif (ph = this:match_phenomenon(argstr))  if ($list_utils:flatten(this.pdetails[ph[1]]) == {})    return player:tell("There are no details defined on ", this.pnames[ph[1]], ".");  endif  answer = $command_utils:read(player:tell("Are you sure you want to clear all the details defined on ", this.pnames[ph[1]], "?"));  if ($string_utils:find_prefix(answer, {"yes", "1"}))    for ph_index in (ph)      if (this.pdetails[ph_index])        details = length(this.pdetails[ph_index][1]);        for d in [1..details]          player:tell(this.pdetails[ph_index][1][d], " cleared from ", this.pnames[ph_index], ".");          $command_utils:suspend_if_needed(0);        endfor        this.pdetails[ph_index] = {};        player:tell("All details cleared from ", this.pnames[ph_index], ".");      endif      $command_utils:suspend_if_needed(0);    endfor  else    return player:tell("Clear canceled.");  endifelse  player:tell("There is no phenomenon called ", argstr, " defined on ", this:title(), ".");endif"LMB #23230 01/18/2011";.@args #16043:"phenomenon" this none this@program #16043:phenomenonindex = args[1];name = this.pnames[index];data = this.pvalues[index][2];shape_index = this.pvalues[index][3];shape = this.p_shapes[shape_index];string = "";if (shape == "sphere")  string = ((name + " has a radius of ") + tostr(data[1])) + ".";elseif (shape == "ellipsoid")  string = ((name + " has three semiaxes of lengths ") + $string_utils:english_list(data)) + ". ";elseif (shape == "torus")  string = ((((name + " has a radius of ") + tostr(data[1])) + " and its tube has a radius of ") + tostr(data[2])) + ".";elseif (shape == "elliptical_torus")  string = ((((((name + " has two semiaxes of lengths ") + tostr(data[1])) + " and ") + tostr(data[2])) + " and a radial semiaxis of ") + tostr(data[3])) + ".";endifreturn string;"LMB #23230 01/19/2011";.@args #16043:"acceptable" this none this@program #16043:acceptablereturn ((this:perm_check(@args) || (caller_perms() == this.owner)) || (caller_perms() == #23230)) && pass(@args);"LMB #23230 01/23/2011";.@args #16043:"@set-stars @setstars" any any any@program #16043:@set-stars"Usage:  @set-stars <phenomenon>";"  Sets the stars to be displayed when a ship passes through a phenomenon.";if (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifif (!args)  return player:tell("Usage:  @set-stars <phenomenon>");endifph = argstr;if (!(p_index = this:match_phenomenon(ph)))  return player:tell("There is no phenomenon called ", ph, " defined on ", this:title(), ".");else  slice = `$list_utils:slice(this.pstars, p_index) ! ANY => 0';  if (slice)    player:tell("The stars currently defined on ", this:title(), " are:");    player:tell($string_utils:from_list(this.pstars[1], " "));    if (!$string_utils:find_prefix($command_utils:read(player:tell("Do you want to overwrite them?")), {"yes", "1"}))      return player:tell("Command aborted.");    endif  endif  player:tell("Input new stars, one star per line. You may use ANSI codes, but make sure to put a  tag after each one. Each star has a one percent chance of appearing. If you input more than 100 stars, each star will appear with less than 1 percent frequency but a star will definitely appear everywhere one can.");  stars = $command_utils:read_lines();  for p in (p_index)    this.pstars[p] = stars;    $command_utils:suspend_if_needed(0);  endfor  player:tell("Stars changed for ", this.pnames[$string_utils:find_prefix(ph, this.pnames)], ".");endif"LMB #23230 02/14/2011";."***finished***@dump #18408;#18408.("noperms_msg") = "Who do you think you are? Q?";#18408.("pnames") = {"The Milky Way", "Horsehead Nebula"};#18408.("pdescs") = {{"The Milky Way is a barred, spiral galaxy that radiates out from a dense, brilliant core. Thick tendrils of stellar mass and roiling plumes of primordial gases slice across the visible cosmos in every direction. But space, even here, is still a cold, empty vacuum--the very essence of being between the past of your origin and the future of your desires."}, {"The glowing pink gases of nebula IC 434, better known as the Horsehead Nebula, provide a cosmic canvas for one of the most familiar objects in the galaxy: a giant plume of dark stellar matter in the shape of a horse's head. From Earth, the resemblance is so striking, even little children know about it. But the nebula also hides in its coral-colored sea a secret few in the entire universe know about."}};#18408.("pvalues") = {{{26000.0, 359.94431, 90.04619}, {100000.0, 100000.0, 1000.0}, 2, 0}, {{1500.0, 206.9561, 106.7753}, {20.0, 30.0, 20.0}, 2, 2}};#18408.("pdetails") = {{{"core"}, {{"The galactic core is one of the great unknowns of the cosmos. What lies beyond the massive clusters of stellar matter that shield it from view? Something in you desires to find out. After all, doesn't everything revolve around it, everything that we are and everything that we were or will ever be?"}}}, {}};#18408.("pstars") = {{}, {"0", "0", "0", "#", "#", "#", "O", "O", "O", "*", "*", "*", "*", "*", "*", "&", "&", "&", "&", "&", "o", "o", "o", "o", "o", ".", ".", ".", ".", ".", ".", ".", "."}};#18408.("entrances") = {};#18408.("exits") = {};#18408.("dark") = 1;#18408.("key") = 0;#18408.("aliases") = {"BaySpace"};#18408.("description") = "The inky blackness of empty space extends to infinity in all directions. Your mind aches as you try to comprehend the reality of living in a reality that has no limits or boundaries and exists as far back or as far forward in time as you care to go.";#18408.("object_size") = {3586, 1297703991}"#18408.("original_owner") => E_PERM (Permission denied)"#18408.("days_left") => E_PERM (Permission denied);#18408.("creation_date") = 969752156"#18408.("queued_task_limit") => E_PERM (Permission denied)"***finished***@dump #8391;#8391.("dock") = #8391;#8391.("oname") = "Spacedock";#8391.("odescription") = {"An enormous space station."};#8391.("valid_space_object") = 1;#8391.("universe") = #18408;#8391.("help_msg") = "A heavenly body can be a planet, space station, asteroid, or anything else that might be found floating in the cosmic void. Ships can land on it. Exploring the heavenly bodies of the universe is one of the primary raisons d'etre of MOOSpace. If you'd like to build your own planet, you must first visit Magrathea.";#8391.("phenomenon") = {"The Milky Way", {"The Milky Way is a barred, spiral galaxy that radiates out from a dense, brilliant core. Thick tendrils of stellar mass and roiling plumes of primordial gases slice across the visible cosmos in every direction. But space, even here, is still a cold, empty vacuum--the very essence of being between the past of your origin and the future of your desires."}};#8391.("user_verbs") = {"@permit", "@oname", "@odescription", "@cloak", "@add-ship", "@remove-ship", "@ships", "@dock"};#8391.("tell_exits") = 1;#8391.("w_time") = 1004774400;#8391.("w_prog") = 5;#8391.("noises") = {"A soft humming sound emanates from a large starship entering the docking bay.", "A laughing group of Starfleet cadets saunters and high-fives its way up to the Promenade.", "Several high-ranking officers disembark from a shuttlepod and confer with each other.", "Two Klingon warriors stride confidently out of a turbolift and onto the landing platform. Everyone gets out of their way.", "A small group of Romulan ambassadors arrives and looks around suspiciously before moving on.", "The PA announces, \"Welcome to Spacedock. Please report any unusual activity to a security officer. Thank you and have a nice day.\"", "An X-wing blasts into the docking bay, screeches across the landing deck, spins around, and comes to a halt. Its pilot looks around, appears disoriented, and takes off again. Nobody seems to notice.", "The private ship of the famous telepathic mezzo-soprano Lwaxana Grax lands and is surrounded by excited Betazoids. Grax appears at the hatch and gazes at her fans meaningfully without saying a word. The crowd seems to love it.", "A bearded and bespectacled old doctor, leaning on a young security officer, hobbles off a turbolift while chattering away about the dangers of transporters.", "The PA announces, \"Please keep your luggage with you at all times. Unattended bags will be removed and may be damaged or destroyed. Thank you and have a nice day.\"", "A lumpy, organic-looking ship docks and a contingent of slug-like creatures emerges. They slime their way toward the immigration office while a maintenance crew hoses down the deck behind them.", "An arguing group of Ferengi merchants haggles and bargains its way across the landing deck.", "A science vessel with comet-scars dotting most of its hull lurches into the docking bay.", "The PA announces, \"Captain Priebus, Captain Reince Priebus, please report to sick bay immediately.\"", "A bunch of little Vulcan children run excitedly across the landing platform while their disapproving chaperones chase after them.", "Three teenage girls from Earth disembark from a passenger ship and follow their parents to the turbolifts, feverishly checking their personal tricorders the whole way."};#8391.("noisy") = 1;#8391.("who_location_msg") = "Spacedock [%T]";#8391.("entrances") = {#5191, #15072};#8391.("blessed_task") = 859669880;#8391.("exits") = {#12836, #4569};#8391.("blessed_object") = #-1;#8391.("key") = 0;#8391.("aliases") = {"Docking Bay", "Spacedock"};#8391.("description") = "This is the docking bay of Spacedock. A near-constrant stream of shuttlecrafts land and take off, making this one of the busiest places in the entire solar system. The bay itself is enormous, perhaps the size of several football fields and opens onto a spectacular view of the Earth. From this vantage point, you can just make out the San Francisco Bay area amidst the usual fog and clouds. Only a force field protects the docking bay from the vacuum of space, but the hundreds of people going about their business hardly seem to notice. Thus does the extraordinary become for some mundane.";#8391.("object_size") = {5309, 1297703991}"#8391.("original_owner") => E_PERM (Permission denied)"#8391.("days_left") => E_PERM (Permission denied);#8391.("creation_date") = 969752984"#8391.("queued_task_limit") => E_PERM (Permission denied)"***finished***@dump #17102;#17102.("launched") = 0;#17102.("speed") = 10;#17102.("in_range") = #8391;#17102.("explored") = {#19782, #8391};#17102.("dock") = #17102;#17102.("oname") = "USS Enterprise";#17102.("odescription") = {"The USS Enterprise, NCC-1701-D is an enormous starship, one of only six Galaxy-class starships ever to be constructed. Starfleet's flagship, the Enterprise was actually destroyed in a terrible movie but has been recreated and assigned to Spacedock as a training ship for budding interstellar explorers."};#17102.("valid_space_object") = 1;#17102.("universe") = #18408;#17102.("help_msg") = "For general piloting instructions, please visit Starfleet Academy. For help with a specific command, see the help documentation for that verb.";#17102.("phenomenon") = {"The Milky Way", {"The Milky Way is a barred, spiral galaxy that radiates out from a dense, brilliant core. Thick tendrils of stellar mass and roiling plumes of primordial gases slice across the visible cosmos in every direction. But space, even here, is still a cold, empty vacuum--the very essence of being between the past of your origin and the future of your desires."}};#17102.("user_verbs") = {"@permit", "@oname", "@odescription", "@cloak", "@add-ship", "@remove-ship", "@ships", "enter", "exit", "launch", "land", "scan", "location", "bearing", "heading", "eta", "speed", "engage", "disengage", "hail", "@stars", "@sensors"};#17102.("tell_exits") = 1;#17102.("noperms_msg") = "You are not authorized to operate %t.";#17102.("w_time") = 964166400;#17102.("w_prog") = 3;#17102.("entrances") = {};#17102.("blessed_task") = 1815215361;#17102.("exits") = {};#17102.("blessed_object") = #119;#17102.("key") = 0;#17102.("aliases") = {"USS Enterprise", "Enterprise"};#17102.("description") = {"The bridge of the starship Enterprise is just as you imagined it: the captain's chair, the helm, the distinctive touch displays; it's all exactly what you expected. The crew hurries about, busily attending to the ship's various systems. The Enterprise is the flagship of the Federation, Starfleet's pride and joy. And it's entirely yours to command. Use it to explore the universe as much as you like, but it will automatically return to Spacedock after 12 hours away."};#17102.("object_size") = {5035, 1297703991}"#17102.("original_owner") => E_PERM (Permission denied)"#17102.("days_left") => E_PERM (Permission denied);#17102.("creation_date") = 969427497"#17102.("queued_task_limit") => E_PERM (Permission denied)@args #17102:"laun*ch" none none none@program #17102:launchif (!this.launched)  pass(@args);  player:tell("USS Enterprise will return to Spacedock in 12 hours.");  this:announce(player:title(), " takes command of ", this:title(), ". It will return to Spacedock in 12 hours.");  this.launched = 1;  fork (42900)    if (this.location != #17102)      this:announce_all("*** ", this:title(), " will return to Spacedock in 5 minutes.");      $command_utils:suspend(300);      if (this.location != #17102)        this:announce_all("*** ", this:title(), " now returning to Spacedock.");        this:moveto(#8391);        this.coordinates = #8391.coordinates;        this.universe = #8391.universe;        this:range_update(this.in_range);        this.in_range = this.location;        this:announce_lines(this:look_outside());        this:announce_all(this:title(), " has returned to Spacedock.");        this.location:announce_all(this:title(), " appears in the Docking Bay, seemingly out of nowhere.");        this.launched = 0;      endif    endif  endforkelse  pass(@args);endif"LMB #23230 02/13/2011";."***finished***@dump #21738;#21738.("launched") = 0;#21738.("heading") = #8391;#21738.("speed") = 10.0;#21738.("in_range") = #19782;#21738.("explored") = {#8391, #19782, #8510};#21738.("permitted") = {#23230};#21738.("oname") = "Shuttlepod Alpha";#21738.("odescription") = {"A tiny, insignificant shuttlecraft, primarily designed to travel back and forth between Spacedock and the Earth."};#21738.("valid_space_object") = 1;#21738.("universe") = #18408;#21738.("help_msg") = "For general piloting instructions, please visit Starfleet Academy. For help with a specific command, see the help documentation for that verb.";#21738.("user_verbs") = {"@permit", "@oname", "@odescription", "@cloak", "@add-ship", "@remove-ship", "@ships", "enter", "exit", "launch", "land", "scan", "location", "bearing", "heading", "eta", "speed", "engage", "disengage", "hail", "@stars", "@sensors"};#21738.("tell_exits") = 1;#21738.("noperms_msg") = "You are not authorized to operate %t.";#21738.("w_time") = 1052208000;#21738.("w_prog") = 2;#21738.("entrances") = {};#21738.("blessed_task") = 1815215361;#21738.("exits") = {};#21738.("blessed_object") = #119;#21738.("key") = 0;#21738.("aliases") = {"Shuttlepod Alpha", "alpha"};#21738.("description") = "The shuttlepod, though quite small, is surprisingly roomy and makes for pleasant, short-range journeys. A number of potted plants huddle in the corner of the ship, obviously headed to the new Spacedock.";#21738.("object_size") = {5803, 1297703991}"#21738.("original_owner") => E_PERM (Permission denied)"#21738.("days_left") => E_PERM (Permission denied);#21738.("creation_date") = 970429942"#21738.("queued_task_limit") => E_PERM (Permission denied)@args #21738:"shuttle" this none this@program #21738:shuttleif ((!this:perm_check(caller)) && (!$object_utils:isa(caller, #21738)))  player:tell(this:noperms_msg());  return E_PERM;endiflocation = this.location;dest = args[1];this.location:announce_all(this:launch_start_outside_msg());this:command_launch();this:announce_lines(this:scan_report());this:announce_all(this:title(), " has safely launched into ", this:universe(), " and is now headed toward ", dest:oname(), ".");$command_utils:suspend(3);this:command_land(dest);this.location:announce_all(this:land_end_outside_msg());this.in_range = this.location;this:announce_lines(this:look_outside());this:announce_all(this:title(), " has arrived at ", dest:oname(), ".");"LMB #23230 02/11/2011";.@args #21738:"enterfunc" this none this@program #21738:enterfuncpass(@args);dest = (this.location == #19782) ? #8391 | #19782;fork (2)  if (this.launched == 0)    player:tell(this.location:oname(), " flight control hails: \"Type 'launch' if you want to travel to ", dest:oname(), ".\"");  endifendfork"LMB #23230 02/10/2011";.@args #21738:"laun*ch" none none none@program #21738:launch"Usage:  launch";"  Launches the shuttlepod into space. It automatically transfers back and forth between Earth and Spacedock.";if (this.launched == 0)  this.launched = 1;  dest = (this.location == #19782) ? #8391 | #19782;  origin = this.location;  rival = (this == #21738) ? #20386 | #21738;  rival.launched = 1;  this:announce_all(this:title(), " will depart for ", dest:oname(), " in 10 seconds. If your travel plans today do not include ", dest:oname(), ", please disembark now.");  rival:announce_all(rival:title(), " will depart for ", origin:oname(), " in 10 seconds. If your travel plans today do not include ", origin:oname(), ", please disembark now.");  $command_utils:suspend(9);  this:announce_all(this:title(), " now departing for ", dest:oname(), ".");  rival:announce_all(rival:title(), " now departing for ", origin:oname(), ".");  $command_utils:suspend(1);  fork (0)    rival:shuttle(origin);  endfork  this:shuttle(dest);  this.launched = 0;  rival.launched = 0;else  player:tell(this:title(), " is currently in transit. Please wait until it lands before you launch it again.");endif"LMB #23230 02/11/2011";."***finished***