@dump #19950@chmod #19950."heading" ;#19950.("heading") = 0@chmod #19950."bearing" ;#19950.("bearing") = {0.0, 0.0, 0.0}@chmod #19950."speed" ;#19950.("speed") = 1@chmod #19950."in_range" ;#19950.("in_range") = {{}, {}, {}, {}}@chmod #19950."engage_origin_msg" r;#19950.("engage_origin_msg") = "You say, \"Engage!\" and %t powers up its engines."@chmod #19950."oengage_origin_msg" r;#19950.("oengage_origin_msg") = "%n says, \"Engage!\" and %t powers up its engines."@chmod #19950."engage_arrive_msg" r;#19950.("engage_arrive_msg") = "You have brought %t safely to its destination."@chmod #19950."oengage_arrive_msg" r;#19950.("oengage_arrive_msg") = "%t arrives safely at its destination."@chmod #19950."hail_origin_msg" r;#19950.("hail_origin_msg") = "You hail %d with: "@chmod #19950."ohail_origin_msg" r;#19950.("ohail_origin_msg") = "%n hails %d with: "@chmod #19950."hail_receive_msg" r;#19950.("hail_receive_msg") = "%n hails from %t: "@chmod #19950."commander_msg" r;#19950.("commander_msg") = "The crew stands at attention as you enter the bridge."@chmod #19950."ocommander_msg" r;#19950.("ocommander_msg") = "The crew stands at attention as %n enters the bridge."@chmod #19950."launch_start_msg" r;#19950.("launch_start_msg") = "You launch %t into space."@chmod #19950."olaunch_start_msg" r;#19950.("olaunch_start_msg") = "%n launches %t into space."@chmod #19950."launch_start_outside_msg" r;#19950.("launch_start_outside_msg") = "%t rises into the air and blasts off into space."@chmod #19950."launch_end_msg" r;#19950.("launch_end_msg") = "%t arrives safely in"@chmod #19950."olaunch_end_msg" r;#19950.("olaunch_end_msg") = "%n has successfully launched %t into"@chmod #19950."board_msg" r;#19950.("board_msg") = "You board %t."@chmod #19950."oboard_msg" r;#19950.("oboard_msg") = "%n boards %t."@chmod #19950."oboard_depart_msg" r;#19950.("oboard_depart_msg") = "%n has boarded %t."@chmod #19950."disembark_msg" r;#19950.("disembark_msg") = "You have disembarked from %t."@chmod #19950."odisembark_msg" r;#19950.("odisembark_msg") = "%n has disembarked from %t for %l."@chmod #19950."odisembark_arrive_msg" r;#19950.("odisembark_arrive_msg") = "%n disembarks from %t."@chmod #19950."land_start_msg" r;#19950.("land_start_msg") = "You lower the landing gear and prepare to land %t on"@chmod #19950."oland_start_msg" r;#19950.("oland_start_msg") = "%n lowers the landing gear and prepares to land %t on"@chmod #19950."land_end_msg" r;#19950.("land_end_msg") = "You bring %t in for a smooth landing on"@chmod #19950."oland_end_msg" r;#19950.("oland_end_msg") = "%n brings %t in for a smooth landing on"@chmod #19950."land_end_outside_msg" r;#19950.("land_end_outside_msg") = "%t soars in from outer space and lands gracefully nearby."@chmod #19950."engines" ;#19950.("engines") = 0@chmod #19950."explored" ;#19950.("explored") = {}@chmod #19950."scan_msg" r;#19950.("scan_msg") = "A beam of light from %t scans you."@chmod #19950."oscan_msg" r;#19950.("oscan_msg") = "A beam of light from %t scans"@chmod #19950."disengage_msg" r;#19950.("disengage_msg") = "You disengage the engines and bring %t to a full stop."@chmod #19950."odisengage_msg" r;#19950.("odisengage_msg") = "%n disengages the engines and brings %t to a full stop.";#19950.("oname") = "[MOOSpace] Generic Interstellar Craft";#19950.("odescription") = {"This is the parent of all spaceships in the MOOSpace system. To create one for yourself, visit the San Francisco Shipyards adjacent to Starfleet Headquarters."};#19950.("help_msg") = "For general piloting instructions, please visit Starfleet Academy. For help with a specific command, see the help documentation for that verb.";#19950.("tell_exits") = 1;#19950.("noperms_msg") = "You are not authorized to operate %t.";#19950.("w_time") = 950774400;#19950.("entrances") = {};#19950.("blessed_task") = 1815215361;#19950.("exits") = {};#19950.("blessed_object") = #119;#19950.("key") = 0;#19950.("aliases") = {"[MOOSpace] Generic Interstellar Craft", "gic"};#19950.("description") = "This is the parent of all spaceships in the MOOSpace system. To create one for yourself, visit the San Francisco Shipyards adjacent to Starfleet Headquarters.";#19950.("object_size") = {40705, 1297290435}"#19950.("original_owner") => E_PERM (Permission denied)"#19950.("days_left") => E_PERM (Permission denied);#19950.("creation_date") = 969427497"#19950.("queued_task_limit") => E_PERM (Permission denied)@args #19950:"laun*ch" none none none@program #19950:launch"Usage:  launch";"  Launches this ship into whatever universe whatever heavenly body it is landed on is in.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be launched. Type 'help #7466:initialize' for details.");elseif ($object_utils:isa(this.location, #16043))  player:tell(this:title(), " has already been launched into ", this:universe(), ".");else  player:tell(this:launch_start_msg());  this:announce(this:olaunch_start_msg());  this.location:announce_all(this:launch_start_outside_msg());  if (!this:command_launch())    player:tell("Launch failed. There must be a permissions conflict somewhere.");    this:announce("Launch attempt failed.");    return;  else    this:scan();    player:tell(((this:launch_end_msg() + " ") + this:universe()) + ".");    this:announce(((this:olaunch_end_msg() + " ") + this:universe()) + ".");  endifendif"LMB #23230 02/03/2011";.@args #19950:"command_launch" this none this@program #19950:command_launchif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifthis:moveto(this.universe);if (this.location == this.universe)  $command_utils:suspend(1);  old_range = this.in_range;  this:sensor_sweep();  this:range_update(old_range);  return 1;else  return 0;endif"LMB #23230 02/03/2011";.@args #19950:"sensor_sweep" this none this@program #19950:sensor_sweepif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifif (typeof(this.in_range) != LIST)  this.in_range = {{}, {}, {}, {}};endifif (!$object_utils:isa(this.location, #16043))  return;endifset = {};contents = setremove(this.universe.contents, this);for o in (contents)  if (this:valid_space_object(o) && (!o.cloaked))    set = {@set, o};  endif  $command_utils:suspend_if_needed(0);endformy_coordinates = this.coordinates;same = {};near = {};med = {};long = {};for x in (set)  their_coordinates = x.coordinates;  d = this.universe:distance(my_coordinates, their_coordinates);  if (d <= 10.0)    same = {@same, x};    this:exp(x);  elseif (d <= 100.0)    near = {@near, x};  elseif (d <= 500.0)    med = {@med, x};  elseif (d <= 1000.0)    long = {@long, x};  endif  $command_utils:suspend_if_needed(0);endforthis.in_range = {same, near, med, long};"LMB #23230 02/05/2011";.@args #19950:"sensor_update" this none this@program #19950:sensor_updateif ((!this:perm_check(caller)) && (!this:perm_check(caller_perms())))  player:tell(this:noperms_msg());  return E_PERM;endifrange = this.in_range;{ship, switch} = args;if (switch == 0)  for r in [1..4]    for s in (range[r])      if (s == ship)        range[r] = setremove(range[r], s);        break r;      endif      $command_utils:suspend_if_needed(0);    endfor    $command_utils:suspend_if_needed(0);  endfor  this.in_range = range;elseif (switch == 1)  ship_range = ship.in_range;  for r in [1..4]    for s in (ship_range[r])      if (s == this)        range[r] = setadd(range[r], ship);        break r;      endif      $command_utils:suspend_if_needed(0);    endfor    $command_utils:suspend_if_needed(0);  endforendifthis.in_range = range;"LMB #23230 01/23/2011";.@args #19950:"look_self" this none this@program #19950:look_selfif (player.location == this)  pass(@args);  if (!$object_utils:isa(this.location, #16043))    viewscreen = ("[On Viewscreen: " + this.location:title()) + "]";    player:tell(viewscreen);  else    if (this.engines)      player:tell((((((this:title() + " is currently traveling with a bearing of ") + this:bearing_report()) + (this:heading_report() ? (" toward " + this:heading_report()) + " " | " ")) + "at warp ") + tostr(this.speed)) + ".");    endif    viewscreen = ((("[On Viewscreen: " + this:universe()) + " ") + this:location_report()) + "]";    player:tell(viewscreen);  endifelse  pass(@args);endif"LMB #23230 01/22/2011";.@args #19950:"range_update" this none this@program #19950:range_updateif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifold_range = (typeof(args[1]) == LIST) ? $list_utils:flatten(args[1]) | args[1];if (typeof(old_range) == OBJ)  range = old_range;  total_range = $list_utils:flatten(this.in_range);else  range = $list_utils:flatten(this.in_range);  total_range = $list_utils:remove_duplicates($set_utils:union(range));endiffor x in (total_range)  if (($object_utils:isa(x, #19950) && $object_utils:isa(x.location, #16043)) && $set_utils:intersection(x.contents, connected_players()))    xrange = $list_utils:flatten(x.in_range);    if ((this in xrange) && $object_utils:isa(this.location, #7771))      x:announce_all((((this:oname() + " has ") + ($object_utils:isa(this.location, #19950) ? "docked at " | "landed on ")) + this.location:oname()) + ".");      x:sensor_update(this, 0);    elseif ((this in xrange) && $object_utils:isa(this.location, #21733))      x:announce_all(((this:oname() + " has crossed the event horizon of ") + this.location:oname()) + ".");      x:sensor_update(this, 0);    elseif ((typeof(range) == OBJ) && $object_utils:isa(this.location, #16043))      msg = $object_utils:isa(range, #21733) ? " has emerged from " + range:oname() | (" has launched into space from " + range:oname());      x:announce_all((this:oname() + msg) + ".");      x:sensor_update(this, 1);    else      d = this.universe:distance(this.coordinates, x.coordinates);      if ((d == 0.0) && (this.cloaked == 0))        x:announce_all(this:oname(), " has arrived in this sector.");      endif      if (((d < 10000.0) && (!(this in xrange))) && (this.cloaked == 0))        x:announce_all(this:oname(), " has entered sensor range.");        x:sensor_update(this, 1);      elseif (((d > 10000.0) || (this.cloaked == 1)) && (this in xrange))        x:announce_all(this:oname(), " is no longer in sensor range.");        x:sensor_update(this, 0);      endif    endif  endif  $command_utils:suspend_if_needed(0);endfor"LMB #23230 01/23/2011";.@args #19950:"sc*an" any none none@chmod #19950:scan rxd@program #19950:scan"Usage:  scan <any>";"  Without an argument, scans the local region of space, returning a description of the ship's surroundings, the names of any objects in sensor range, and the ship's absolute location with respect to the origin in the format (azimuth mark inclination at distance). With an object in range as an argument, scans that object. You can also scan visible phenomena more closely, like looking at details in a room description.";if (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be operated. Type 'help #7466:initialize' for details.");endif"This is very old code, but it works, so I didn't modify it very much.";this:sensor_sweep();if (caller == player)  this:announce(player:title(), " performs a sensor sweep of ", this:universe(), ".");endifif (!args)  if ($object_utils:isa(this.location, #16043))    player:tell((this:universe() + " ") + this:location_report());    player:tell_lines(this:universe_desc());    names = {};    if (length(this.in_range[1]) == 1)      x = this.in_range[1][1];      player:tell(x:oname(), " is in this sector.");    elseif (length(this.in_range[1]) > 1)      for n in (this.in_range[1])        name = ($object_utils:isa(n, #7771) && (!$object_utils:isa(n, #19950))) ? "*" + n:oname() | ($object_utils:isa(n, #9602) ? "@" + n:oname() | n:oname());        names = {@names, name};        $command_utils:suspend_if_needed(0);      endfor      player:tell($string_utils:english_list(names), " are in this sector.");    endif    if (length(this.in_range[2]) == 1)      x = this.in_range[2][1];      player:tell(x:oname(), " is nearby.");    elseif (length(this.in_range[2]) > 1)      for n in (this.in_range[2])        name = ($object_utils:isa(n, #7771) && (!$object_utils:isa(n, #19950))) ? "*" + n:oname() | ($object_utils:isa(n, #9602) ? "@" + n:oname() | n:oname());        names = {@names, name};        $command_utils:suspend_if_needed(0);      endfor      player:tell($string_utils:english_list(names), " are nearby.");    endif    if (length(this.in_range[3]) == 1)      x = this.in_range[3][1];      player:tell(x:oname(), " is in medium sensor range.");    elseif (length(this.in_range[3]) > 1)      for n in (this.in_range[3])        name = ($object_utils:isa(n, #7771) && (!$object_utils:isa(n, #19950))) ? "*" + n:oname() | ($object_utils:isa(n, #9602) ? "@" + n:oname() | n:oname());        names = {@names, name};        $command_utils:suspend_if_needed(0);      endfor      player:tell($string_utils:english_list(names), " are in medium sensor range.");    endif    if (length(this.in_range[4]) == 1)      x = this.in_range[4][1];      player:tell(x:oname(), " is in long sensor range.");    elseif (length(this.in_range[4]) > 1)      for n in (this.in_range[4])        name = ($object_utils:isa(n, #7771) && (!$object_utils:isa(n, #19950))) ? "*" + n:oname() | ($object_utils:isa(n, #9602) ? "@" + n:oname() | n:oname());        names = {@names, name};        $command_utils:suspend_if_needed(0);      endfor      player:tell($string_utils:english_list(names), " are in long sensor range.");    endif  else    this:look_outside();    this.location:announce_all(this:oscan_msg(), " ", this.location:title(), ".");  endifelse  if ($object_utils:isa(this.location, #16043))    "Handle phenomenon details.";    phenomenon = this:universe();    ph_index = (phenomenon == this.universe:title()) ? 0 | (phenomenon in this.universe.pnames);    if (ph_index && (details = this.universe.pdetails[ph_index]))      match = $string_utils:find_prefix(argstr, details[1]);      if (match)        return player:tell_lines(details[2][match]);      elseif (ph = $string_utils:find_prefix(argstr, this.universe.pnames))        return player:tell_lines(this.universe.pdescs[ph]);      elseif ($string_utils:find_prefix(argstr, this.universe:title()))        player:tell_lines(this.universe:description());      endif    endif    range = $list_utils:flatten(this.in_range);    match = $string_utils:match(argstr, range, "oname");    if ((match == $failed_match) || (!this:valid_space_object(match)))      player:tell("There is no '", argstr, "' in sensor range.");    elseif (match == $ambiguous_match)      player:tell("'", argstr, "' can refer to more than one object in sensor range. Be more specific.");    else      player:tell(match:oname(), " ", match:location_report(), " is in ", match:universe(), ".");      player:tell_lines(match:odescription());      if ($object_utils:isa(match, #7771) && (!$object_utils:isa(match, #19950)))        player:tell(match:oname(), " is a heavenly body. Perhaps you can land on it?");      elseif ($object_utils:isa(match, #9602))        player:tell(match:oname(), " is some sort of astrophysical anomaly. Perhaps you can approach it and learn more about it?");      elseif ($object_utils:isa(match, #19950) && match.engines)        player:tell(match:oname(), " is traveling with a bearing of ", match:bearing_report(), " at warp ", match.speed, ".");      endif    endif  else    range = this.location.contents;    match = $string_utils:match(argstr, range, "aliases");    if (match == $failed_match)      player:tell("There is no '", argstr, "' in ", this.location:title(), ".");    elseif (match == $ambiguous_match)      player:tell("'", argstr, "' can refer to more than one object in ", this.location:title(), ". Be more specific.");    else      match:look_self();      if (is_player(match) && (match in connected_players()))        match:tell(this:scan_msg());        match.location:announce_all_but({match}, ((this:oscan_msg() + " ") + match:title()) + ".");      endif    endif  endifendif"LMB #23230 02/03/2011";.@args #19950:"lan*d doc*k" any none none@program #19950:land"Usage:  land <location>";"  Lands the ship at the specified location, if possible. Only trusted ships may land at locations where the trusted ship list is not empty.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be launched. Type 'help #7466:initialize' for details.");elseif (!$object_utils:isa(this.location, #16043))  player:tell(this:title(), " is already landed on ", this.location:title(), ".");elseif (!args)  return player:tell("Usage:  land <location>");else  range = this.in_range[1];  planet = argstr;  match = $string_utils:match(planet, range, "oname");  all_range = $list_utils:flatten(this.in_range);  out_of_range = $string_utils:match(planet, $set_utils:difference(all_range, range), "oname");  if (out_of_range)    return player:tell(this:title(), " must be in the same sector as ", out_of_range:oname(), " in order to attempt landing on it.");  endif  if ((match == $failed_match) || (!this:valid_space_object(match)))    player:tell("There is no '", planet, "' in this sector.");  elseif (match == $ambiguous_match)    player:tell("'", planet, "' can refer to more than one object in sensor range. Be more specific.");  elseif (!$object_utils:isa(match, #7771))    player:tell(match:oname(), " cannot be landed on.");  elseif (match:trusted_ships() && (!(this in setadd(match:trusted_ships(), #8510))))    player:tell(this:title(), " is not permitted to land at ", match:oname(), ".");  else    player:tell(((this:land_start_msg() + " ") + match:oname()) + ".");    this:announce(((this:oland_start_msg() + " ") + match:oname()) + ".");    if (this:command_land(match))      this:scan();      player:tell(((this:land_end_msg() + " ") + match:oname()) + ".");      this:announce(((this:oland_end_msg() + " ") + match:oname()) + ".");      this.location:announce(this:land_end_outside_msg());      this.in_range = this.location;    else      player:tell(this:title(), " cannot seem to land at ", match:oname(), ". There might be a permissions problem or else ", match:oname(), " doesn't want you.");      this:announce($object_utils:isa(match, #19950) ? "Dock" | "Land", " attempt failed.");    endif  endifendif"LMB #23230 01/23/2011";.@args #19950:"command_land" this none this@program #19950:command_landif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifplanet = args[1];this:moveto(planet);if (this.location == planet)  $command_utils:suspend(1);  this:range_update(this.in_range);  return 1;else  return 0;endif"LMB #23230 02/03/2011";.@args #19950:"look_outside" this none this@program #19950:look_outsideplayer:tell_lines(this.location:title());desc = this.location:description();if (desc)  player:tell_lines(desc);else  player:tell("You see nothing special.");endifif ($object_utils:has_callable_verb(this.location, "tell_integration"))  this.location:tell_integration();endifthis.location:tell_contents(setremove(this.location.contents, this), 3);"LMB #23230 09/30/2000";.@args #19950:"ent*er bo*ard go" this none none@program #19950:enter"Usage:  enter <this>";"  Board the ship. If you have :moveto() protection, this command may not function.";if ((player.location == this) || $object_utils:isa(this.location, #16043))  player:tell("I don't understand that.");else  player:moveto(this);  if (player.location != this)    player:tell("You seem unable to board ", this:oname(), ". Make sure you don't have moveto() protection.");  else    player:tell(this:board_msg());    this:announce(this:oboard_msg());    this.location:announce(this:oboard_depart_msg());  endifendif"LMB #23230 02/02/2011";.@args #19950:"ex*it disem*bark out" none none none@program #19950:exit"Usage:  exit";"  Exit the ship. You cannot exit a ship while it is in space.";if (player.location != this)  return player:tell("I don't understand that.");endifif ($object_utils:isa(this.location, #16043))  player:tell("You cannot exit ", this:title(), " until it lands.");else  player:moveto(this.location);  if (player.location == this)    player:tell("You seem unable to exit ", this:title(), ". Make sure you don't have moveto() protection.");  else    player:tell(this:disembark_msg());    this:announce(this:odisembark_msg());    this.location:announce(this:odisembark_arrive_msg());  endifendif"LMB #23230 01/20/2011";.@args #19950:"enterfunc confunc" this none this@program #19950:enterfuncif (is_player(caller) && this:perm_check(caller))  player:tell(this:commander_msg());  this:announce(this:ocommander_msg());endifpass(@args);"LMB #23230 02/03/2011";.@args #19950:"sp*eed warp wp" any none none@program #19950:speed"Usage:  speed | speed <new speed>";"  Displays the current speed of the ship or sets a new one.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can be launched. Type 'help #7466:initialize' for details.");endifif (!args)  player:tell(this:title(), " is currently set to travel at warp ", this.speed, ".");else  speed = tofloat(argstr);  if ((speed < 1.0) || (speed > 10.0))    player:tell("'", argstr, "' is an incorrect speed setting. ", this:title(), " can only be set to travel between warp 1 and warp 10.");  else    this.speed = tofloat(speed);    this.speed = speed;    player:tell(this:title(), " is now set to travel at warp ", speed, ".");    this:announce(player:title(), " set ", this:title(), " to travel at warp ", speed, ".");  endifendif"LMB #23230 01/23/2011";.@args #19950:"head*ing bear*ing" any any any@program #19950:heading"Usage:  bearing <radius> <azimuth> <inclination> | heading <destination>";"  There are two ways to navigate in MOOSpace. The first is to enter a bearing, which is a specific location to which you want to travel expressed in spherical coordinates. The radius is the absolute distance of the location from the origin point, the azimuth is the angle >= 0.0 and < 360.0 degrees between, e.g., the line pointing toward the center of the galaxy and the ship's direction of travel, and the inclination is the angle >= 0.0 and <= 180.0 degrees between, e.g., the line pointing toward the north pole of the galaxy and the ship's direction of travel, with 90.0 degrees being level with, e.g. the galactic plane (or however you want to imagine the structure of the universe). If you want to travel on a true bearing, you can enter a very high radius value, though it takes about a day to travel 100,000 light years if the task isn't killed. The second way to navigate is to enter a heading, which in this system is simply the name of a specific object, e.g. a planet or other heavenly body, toward which you wish to navigate. In order to navigate with a heading, you must have visited the named object before.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before the navigation system can be used. Type 'help #7466:initialize' for details.");elseif (!$object_utils:isa(this.location, #16043))  return player:tell(this:title(), " must be launched before its navigation system can be used.");elseif (!args)  msg = (this:title() + ((verb[1] == "b") ? " has a bearing of " + this:bearing_report() | (this.heading ? " is heading toward " + this:heading_report() | " does not currently have a heading"))) + ".";  return player:tell(msg);elseif ((verb[1] == "b") && (length(args) == 3))  {r, theta, phi} = args;  r = `tofloat(r) ! E_INVARG => 0';  theta = `tofloat(theta) ! E_INVARG => 0';  phi = `tofloat(phi) ! E_INVARG => 0';  if ((((((((r == 0) || (theta == 0)) || (phi == 0)) || (r < 0.0)) || (theta < 0.0)) || (theta >= 360.0)) || (phi < 0.0)) || (phi > 180.0))    player:tell("A bearing must be entered as three numbers: a radius greater than or equal to 0; an azimuth angle greater than or equal to 0 and less than 360; and an inclination angle greater than 0 and less than or equal to 180.");  else    this.bearing = {r, theta, phi};    player:tell(this:title(), " is now set with a bearing of ", this:bearing_report(), ".");    this:announce(player:title(), " has set ", this:title(), " with a bearing of ", this:bearing_report(), ".");  endifelseif (verb[1] == "h")  heading = this:find_heading(argstr);  if (heading == $failed_match)    player:tell("Your ship's navigation system does not know where '", argstr, "' is. Perhaps you haven't discovered it yet?");  elseif (heading == $ambiguous_match)    player:tell("'", argstr, "' can refer to more than one heading. Be more specific.");  elseif ((heading.coordinates == this.coordinates) || (this.universe:distance(heading.coordinates, this.coordinates) == 0.0))    player:tell(this:title(), " is already in the same sector as ", heading:oname(), ".");  elseif (heading == this.heading)    player:tell(this:title(), " is already set on a heading toward ", heading:oname(), ".");  else    this.heading = heading;    this.bearing = heading.coordinates;    player:tell(this:title(), " is now set on a heading toward ", heading:oname(), ".");    this:announce(player:title(), " has set ", this:title(), " on a heading toward ", heading:oname(), ".");  endifelse  command = (verb[1] == "b") ? "bearing <radius> <azimuth> <inclination>" | "heading <destination>";  return player:tell("Usage:  ", command);endif"LMB #23230 02/03/2011";.@args #19950:"h*ail" any any any@program #19950:hail"Usage:  hail <ship> or <player> <message>";"  Send a message to another ship in sensor range. When landed, you can use this command to send a message to a player on the same planet as your ship.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before it can engage in ship to ship communications. Type 'help #7466:initialize' for details.");elseif (length(args) < 2)  return player:tell("Usage: hail <ship> or <player> <message>");endifif (!$object_utils:isa(this.location, #16043))  recipient = $string_utils:explode(args[1])[1];  command = $string_utils:from_list($string_utils:explode(argstr)[2..$], " ");  match = $string_utils:match_player(recipient);  if (match in connected_players())    msg = $string_utils:trim(command);    dobj = match;    player:tell(this:hail_origin_msg(), " \"", msg, "\"");    this:announce(this:ohail_origin_msg(), " \"", msg, "\"");    match:tell(this:hail_receive_msg(), " \"", msg, "\"");  elseif (match == $ambiguous_match)    player:tell("'", argstr, "' can refer to more than one player. Be more specific.");  elseif (match == $failed_match)    player:tell("There is no player called '", argstr, "' at ", this.location:title(), ".");  else    player:tell(match:title(), " is unable to receive hails at this time.");  endifelse  command = argstr;  target = $string_utils:explode(args[1])[1];  range = $list_utils:flatten(this.in_range);  match_list = {};  for r in (range)    name = r:oname() + "*";    if ($string_utils:match_string(command, name) || $string_utils:match_object(target, this.universe))      match_list = setadd(match_list, r);    endif    $command_utils:suspend_if_needed(0);  endfor  if (length(match_list) > 1)    player:tell("'", argstr, "' can refer to more than one ship within sensor range. Be more specific.");  elseif (!match_list)    player:tell("There is no ship called '", argstr, "' within sensor range.");  else    ship = match_list[1];    dobj = ship;    msg = $string_utils:trim($string_utils:from_list($string_utils:match_string(command, ship:oname() + "*")));    player:tell(this:hail_origin_msg(), " \"", msg, "\"");    this:announce(this:ohail_origin_msg(), " \"", msg, "\"");    ship:announce_all(this:hail_receive_msg(), " \"", msg, "\"");  endifendif"LMB #23230 01/23/2011";.@args #19950:"eng*age dis*engage" none none none@program #19950:engage"Usage:  engage | disengage";"  Activates or deactivates the ship's engines. When you engage the ships engines, it will proceed to travel at the current speed, which may be modified en route, until it arrives at the current bearing, which may also be modified en route.";if ((this.permitted != {}) && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;elseif (!this:valid_space_object())  return player:tell(this:title(), " must be initialized before its engines can be engaged. Type 'help #7466:initialize' for details.");elseif (!$object_utils:isa(this.location, #16043))  player:tell(this:title(), " must be launched before its engines can be engaged.");else  if (verb[1] == "e")    if (this.engines)      return player:tell(this:title(), "'s engines are already engaged.");    elseif ((this.bearing == this.coordinates) || (this.universe:distance(this.bearing, this.coordinates) == 0.0))      return player:tell(this:title(), " is already located at its current bearing.");    endif    this.engines = 1;    player:tell(this:engage_origin_msg());    this:announce(this:oengage_origin_msg());    this:announce_all(this:title(), " now traveling at a speed of warp ", this.speed, " on bearing ", this:bearing_report(), ". ETA: ", this:eta_report(), ".");    if (this:engines() && (this.universe:distance(this.coordinates, this.bearing) == 0.0))      this:scan();      player:tell(this:engage_arrive_msg());      this:announce(this:oengage_arrive_msg());    elseif (this.engines)      this:announce_all(this:title(), " seems to be experiencing a warp drive malfunction. Engines disengaged.");    endif    this.engines = 0;  elseif (verb[1] == "d")    if (!this.engines)      return player:tell(this:title(), "'s engines are not currently engaged.");    endif    this.engines = 0;    player:tell(this:disengage_msg());    this:announce(this:odisengage_msg());    this:range_update(this.in_range);  endifendif"LMB #23230 02/03/2011";.@args #19950:"engines" this none this@program #19950:enginesif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endif"This function moves the ship using vector math.";"while (this.universe:distance(this.coordinates, this.bearing) > (this.speed))";"  speed = this.speed;";"  midpoint = this:midpoint(this.coordinates, this.bearing);";"  while (d = this.universe:distance(this.coordinates, midpoint) > (speed))";"    midpoint = this:midpoint(this.coordinates, midpoint);";"  endwhile";"  this.coordinates = midpoint;";"endwhile";" <----- OLD CODE ABOVE, NEW CODE BELOW ----->";origin = this.coordinates;chars = {".", "@", "*", "+", "o", ".", "x", "*", "+", ":"};count = 0;while (((d = this.universe:distance(this.coordinates, this.bearing)) > 0.0) && this.engines)  speed = this.speed;  count = (count > 100) ? 0 | (count + toint(speed));  stars = {};  for s in [1..79]    mod = random(100);    stars = (mod <= 10) ? {@stars, chars[mod]} | {@stars, " "};  endfor  {x1, y1, z1} = this.universe:convert(this.coordinates);  {x2, y2, z2} = this.universe:convert(this.bearing);  {xv, yv, zv} = this:normalize({x1, y1, z1}, {x2, y2, z2});  x = x1 + (speed * xv);  y = y1 + (speed * yv);  z = z1 + (speed * zv);  old_range = this.coordinates;  this.coordinates = this.universe:aconvert({x, y, z});  this.coordinates[1] = ceil(this.coordinates[1]);  this.coordinates[2] = this.bearing[2];  this.coordinates[3] = this.bearing[3];  "Do something here.";  this:range_update(old_range);  suspend(1);  if (d <= speed)    suspend(1);    this.coordinates = this.bearing;  endif  if ($command_utils:running_out_of_time())    this:announce_all(this:title(), " is passing through an unstable area of space and needs a moment to stabilize.");    suspend(60);    this:announce_all(this:title(), " has successfully stabilized.");  endif  if ((count == 100) && $set_utils:intersection(this.contents, connected_players()))    this:announce_all($string_utils:center($string_utils:from_list(stars), 79));    count = 0;  endifendwhilereturn ((this.coordinates == origin) || (this.universe:distance(this.coordinates, origin) == 0.0)) ? 0 | 1;"LMB #23230 01/25/2011";.@args #19950:"commander_msg ocommander_msg launch_start_msg olaunch_start_msg launch_start_outside_msg launch_end_msg olaunch_end_msg board_msg oboard_msg oboard_depart_msg disembark_msg odisembark_msg odisembark_arrive_msg land_start_msg oland_start_msg land_end_msg oland_end_msg land_end_outside_msg scan_msg oscan_msg disengage_msg odisengage_msg engage_origin_msg oengage_origin_msg engage_arrive_msg oengage_arrive_msg hail_origin_msg ohail_origin_msg hail_receive_msg" this none this@program #19950:commander_msg"Verb -> property matching for messages defined on this object not defined on parents.";return $object_utils:has_property(this, verb) ? (msg = this.(verb)) ? $string_utils:pronoun_sub(msg) | "" | "";"LMB #23230 01/09/2011";.@args #19950:"here_huh" this none this@program #19950:here_huh"Look for something to do on an astrophysical anomaly.";if (this.permitted && (!this:perm_check(caller)))  player:tell(this:noperms_msg());  return E_PERM;endif{verb, ?target = ""} = args;if (target && this:valid_space_object())  range = this.in_range[1];  anomaly = 0;  for o in (range)    if (($object_utils:isa(o, #9602) && match(o:title(), target)) && $object_utils:match_verb(o, verb))      anomaly = o;      verb = $object_utils:match_verb(o, verb)[2];    endif    $command_utils:suspend_if_needed(0);  endfor  if (anomaly && this:valid_space_object(anomaly))    anomaly:(verb)();    return 1;  else    pass(@args);  endifelse  pass(@args);endif"LMB #23230 01/22/2011";.@args #19950:"bearing_report" this none this@program #19950:bearing_report{r, theta, phi} = this.bearing;r = tostr(r);theta = tostr(theta);phi = tostr(phi);return ((((theta + " mark ") + phi) + " at ") + r) + " light years";"LMB #23230 01/22/2011";.@args #19950:"heading_report" this none this@program #19950:heading_reportreturn this.heading ? this.heading:oname() | 0;"LMB #23230 01/22/2011";.@args #19950:"exp" this none this@program #19950:expif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifitem = args[1];if ((!(item in this.explored)) && (!$object_utils:isa(item, #19950)))  this.explored = {@this.explored, item};endif"LMB #23230 01/23/2011";.@args #19950:"midpoint" this none this@program #19950:midpoint"Returns the spherical coordinates of the midpoint of a line defined by the arguments, which should both also be sets of spherical coordinates.";{a, b} = args;universe = this.universe;{x1, y1, z1} = universe:convert(a);{x2, y2, z2} = universe:convert(b);midpoint = {0.5 * (x1 + x2), 0.5 * (y1 + y2), 0.5 * (z1 + z2)};return this.universe:aconvert(midpoint);"LMB #23230 01/21/2011";.@args #19950:"normalize" this none this@program #19950:normalize"Normalizes a vector given in two sets of Cartesian coordinates. That is, returns the corresponding (x, y, z) values for the unit vector of the given vector, which should be supplied as a start and end point, respectively.";{origin, dest} = args;{x1, y1, z1} = origin;{x2, y2, z2} = dest;ax = x2 - x1;ay = y2 - y1;az = z2 - z1;mag = sqrt(((ax ^ 2) + (ay ^ 2)) + (az ^ 2));`xv = ax / mag ! E_DIV => 0.0';`yv = ay / mag ! E_DIV => 0.0';`zv = az / mag ! E_DIV => 0.0';return {xv, yv, zv};"LMB #23230 01/21/2011";.@args #19950:"who_location_msg" this none this@program #19950:who_location_msgreturn ((pass(@args) + " [") + this:universe()) + "]";"LMB #23230 01/22/2011";.@args #19950:"title" this none this@program #19950:titleif (player.location != this)  return this:oname();else  return (this:oname() == this.name) ? pass(@args) | this:oname();endif"LMB #23230 01/22/2011";.@args #19950:"find_heading" this none this@program #19950:find_headingif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifsearch = args[1];result = $string_utils:match(search, this.explored, "oname");return result;"LMB #23230 01/23/2011";.@args #19950:"loc*ation" none none none@program #19950:locationplayer:tell(this:title(), " is in ", this:universe(), " ", this:location_report());"LMB #23230 01/23/2011";.@args #19950:"eta_report" this none this@program #19950:eta_reportif (!this:perm_check(caller))  player:tell(this:noperms_msg());  return E_PERM;endifreturn $object_utils:isa(this.location, #16043) ? $time_utils:english_time(toint(this.universe:distance(this.coordinates, this.bearing) / this.speed)) | -1;"LMB #23230 02/03/2011";.@args #19950:"scan_report" this none this@args #19950:"eta" none none none@program #19950:eta"Usage:  eta";"  Reports the estimated time of arrival of this ship at its current bearing if it travels at its current speed.";if (!$object_utils:isa(this.location, #16043))  player:tell(this:title(), " does not currently have a bearing.");elseif (this.universe:distance(this.coordinates, this.bearing) == 0.0)  player:tell(this:title(), " has already arrived at its current bearing.");else  player:tell("At warp ", this.speed, ", ", this:title(), " will arrive at its current bearing in approximately ", this:eta_report(), ".");endif"LMB #23230 02/05/2011";.@args #19950:"name_tag" this none this@program #19950:name_tagscan = args[1];name = scan:oname();if ($object_utils:isa(scan, #7771) && (!$object_utils:isa(scan, #19950)))  name = "*" + name;elseif ($object_utils:isa(scan, #9602))  name = "@" + name;endifreturn name;"LMB #23230 02/09/2011";."***finished***